//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/src/main/java/java/util/Observable.java
//
//  Created by polar on 5/25/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "java/lang/NullPointerException.h"
#import "java/util/Observable.h"
#import "java/util/Observer.h"
#import "java/util/Vector.h"

@implementation JavaUtilObservable

@synthesize changed = changed_;
- (JavaUtilVector *)obs {
  return obs_;
}
- (void)setObs:(JavaUtilVector *)obs {
  JreOperatorRetainedAssign(&obs_, obs);
}
@synthesize obs = obs_;

- (id)init {
  if ((self = [super init])) {
    changed_ = NO;
    JreOperatorRetainedAssign(&obs_, [[[JavaUtilVector alloc] init] autorelease]);
  }
  return self;
}

- (void)addObserverWithJavaUtilObserver:(id<JavaUtilObserver>)o {
  @synchronized(self) {
    {
      if (o == nil) @throw [[[JavaLangNullPointerException alloc] init] autorelease];
      if (![((JavaUtilVector *) NIL_CHK(obs_)) containsWithId:o]) {
        [((JavaUtilVector *) NIL_CHK(obs_)) addElementWithId:o];
      }
    }
  }
}

- (void)deleteObserverWithJavaUtilObserver:(id<JavaUtilObserver>)o {
  @synchronized(self) {
    {
      [((JavaUtilVector *) NIL_CHK(obs_)) removeElementWithId:o];
    }
  }
}

- (void)notifyObservers {
  [self notifyObserversWithId:nil];
}

- (void)notifyObserversWithId:(id)arg {
  IOSObjectArray *arrLocal;
  @synchronized (self) {
    if (!changed_) return;
    arrLocal = [((JavaUtilVector *) NIL_CHK(obs_)) toArray];
    [self clearChanged];
  }
  for (int i = (int) [((IOSObjectArray *) NIL_CHK(arrLocal)) count] - 1; i >= 0; i--) [((id<JavaUtilObserver>) [((IOSObjectArray *) NIL_CHK(arrLocal)) objectAtIndex:i]) updateWithJavaUtilObservable:self withId:arg];
}

- (void)deleteObservers {
  @synchronized(self) {
    {
      [((JavaUtilVector *) NIL_CHK(obs_)) removeAllElements];
    }
  }
}

- (void)setChanged {
  @synchronized(self) {
    {
      changed_ = YES;
    }
  }
}

- (void)clearChanged {
  @synchronized(self) {
    {
      changed_ = NO;
    }
  }
}

- (BOOL)hasChanged {
  @synchronized(self) {
    {
      return changed_;
    }
  }
}

- (int)countObservers {
  @synchronized(self) {
    {
      return [((JavaUtilVector *) NIL_CHK(obs_)) size];
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&obs_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  JavaUtilObservable *typedCopy = (JavaUtilObservable *) copy;
  typedCopy.changed = changed_;
  typedCopy.obs = obs_;
}

@end
