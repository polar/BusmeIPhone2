//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/src/main/java/com/adiron/busme/api/BuspassAPI.java
//
//  Created by polar on 5/25/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/adiron/busme/api/APIBase.h"
#import "com/adiron/busme/api/Buspass.h"
#import "com/adiron/busme/api/BuspassAPI.h"
#import "com/adiron/busme/api/MasterMessage.h"
#import "com/adiron/busme/integration/BoundingBoxE6.h"
#import "com/adiron/busme/integration/http/Header.h"
#import "com/adiron/busme/integration/http/HttpEntity.h"
#import "com/adiron/busme/integration/http/HttpResponse.h"
#import "com/adiron/busme/integration/http/NameValuePair.h"
#import "com/adiron/busme/integration/http/StatusLine.h"
#import "com/adiron/busme/integration/http/message/BasicNameValuePair.h"
#import "com/adiron/busme/platform/Log.h"
#import "java/io/IOException.h"
#import "java/lang/Double.h"
#import "java/lang/Exception.h"
#import "java/lang/IllegalArgumentException.h"
#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/util/ArrayList.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/StringTokenizer.h"

@implementation ComAdironBusmeApiBuspassAPI

static NSString * ComAdironBusmeApiBuspassAPI_LOGTAG_;

- (NSString *)apiUrl {
  return apiUrl_;
}
- (void)setApiUrl:(NSString *)apiUrl {
  JreOperatorRetainedAssign(&apiUrl_, apiUrl);
}
@synthesize apiUrl = apiUrl_;
- (NSString *)appVersion {
  return appVersion_;
}
- (void)setAppVersion:(NSString *)appVersion {
  JreOperatorRetainedAssign(&appVersion_, appVersion);
}
@synthesize appVersion = appVersion_;
- (NSString *)platform {
  return platform_;
}
- (void)setPlatform:(NSString *)platform {
  JreOperatorRetainedAssign(&platform_, platform);
}
@synthesize platform = platform_;
- (ComAdironBusmeApiBuspass *)buspass {
  return buspass_;
}
- (void)setBuspass:(ComAdironBusmeApiBuspass *)buspass {
  JreOperatorRetainedAssign(&buspass_, buspass);
}
@synthesize buspass = buspass_;
@synthesize ready = ready_;
@synthesize postlocTimeRate = postlocTimeRate_;
@synthesize postlocDistRate = postlocDistRate_;
@synthesize curlocTimeRate = curlocTimeRate_;
@synthesize updateRate = updateRate_;
@synthesize activeStartDisplayThreshold = activeStartDisplayThreshold_;
@synthesize activeEndWaitThreshold = activeEndWaitThreshold_;
@synthesize offRouteDistanceThreshold = offRouteDistanceThreshold_;
@synthesize offRouteCountThreshold = offRouteCountThreshold_;
@synthesize offRouteTimeThreshold = offRouteTimeThreshold_;
@synthesize syncRate = syncRate_;
@synthesize bannerMaxImageSize = bannerMaxImageSize_;
@synthesize bannerRefreshRate = bannerRefreshRate_;

+ (NSString *)LOGTAG {
  return ComAdironBusmeApiBuspassAPI_LOGTAG_;
}

- (id)initWithNSString:(NSString *)initialUrl
          withNSString:(NSString *)platform
          withNSString:(NSString *)appVersion {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&platform_, @"Android");
    JreOperatorRetainedAssign(&buspass_, [[[ComAdironBusmeApiBuspass alloc] init] autorelease]);
    ready_ = NO;
    postlocTimeRate_ = -1;
    postlocDistRate_ = -1;
    curlocTimeRate_ = -1;
    updateRate_ = -1;
    activeStartDisplayThreshold_ = -1;
    activeEndWaitThreshold_ = -1;
    offRouteDistanceThreshold_ = -1;
    offRouteCountThreshold_ = -1;
    offRouteTimeThreshold_ = -1;
    syncRate_ = -1;
    bannerMaxImageSize_ = -1;
    bannerRefreshRate_ = -1;
    self.apiUrl = initialUrl;
    self.platform = platform;
    self.appVersion = appVersion;
  }
  return self;
}

- (BOOL)isReady {
  return ready_;
}

- (NSString *)getApiUrl {
  return apiUrl_;
}

- (void)setApiUrlWithNSString:(NSString *)apiUrl {
  self.apiUrl = apiUrl;
}

- (NSString *)getPlatformName {
  return self.platform;
}

- (NSString *)getPlatformArgs {
  return [NSString stringWithFormat:@"platform=%@&app_version=%@" , [self getPlatformName], [self getBusmeAppVersionString], nil];
}

- (NSString *)getBusmeAppVersionString {
  return self.appVersion;
}

- (ComAdironBusmeApiBuspass *)get {
  if ([self isReady]) {
    return buspass_;
  }
  return [self forceGet];
}

- (ComAdironBusmeApiBuspass *)forceGet {
  @try {
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"get(): Opening %@", apiUrl_]];
    NSString *url = [NSString stringWithFormat:@"%@?%@" , apiUrl_, [self getPlatformArgs], nil];
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self openURLWithNSString:url];
    ComAdironBusmeApiAPIBase_Tag *api = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    if (api != nil && [@"API" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(api)).name]) {
      if ([@"1" isEqual:((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"majorVersion"])]) {
        ComAdironBusmeApiBuspass *bp = JreOperatorRetainedAssign(&buspass_, [[[ComAdironBusmeApiBuspass alloc] init] autorelease]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).mode = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"mode"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).name = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"name"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).slug = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"slug"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).authUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"auth"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).loginUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"login"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).registerUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"register"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).logoutUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"logout"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).oauthLoginUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"oauth_login"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).oauthLogoutUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"oauth_logout"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).postloc_time_rate = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"postloc_time_rate"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).postloc_dist_rate = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"postloc_dist_rate"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).curloc_time_rate = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"curloc_time_rate"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).lon = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"lon"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).lat = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"lat"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).box = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"box"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).timezone = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"timezone"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).time = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"time"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).timeoffset = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"timeoffset"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).datefmt = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"datefmt"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getRouteJourneyIdsUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getRouteJourneyIds"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getRouteDefinitionUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getRouteDefinition"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getJourneyLocationUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getJourneyLocation"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getMultipleJourneyLocationsUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getMultipleJourneyLocations"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).postJourneyLocationUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"postJourneyLocation"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getMessageUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getMessage"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getMessagesUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getMessages"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getMarkersUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getMarkers"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).postFeedbackUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"postFeedback"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).updateUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"update"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).updateRate = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"updateRate"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).activeStartDisplayThreshold = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"activeStartThreshold"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).activeEndWaitThreshold = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"activeEndWaitThreshold"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).offRouteDistanceThreshold = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"offRouteDistanceThreshold"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).offRouteCountThreshold = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"offRouteCountThreshold"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).offRouteTimeThreshold = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"offRouteTimeThreshold"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).getRouteJourneyIds1Url = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"getRouteJourneyIds1"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).markerClickThru = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"markerClickThru"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).messageClickThru = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"messageClickThru"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).syncRate = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"syncRate"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).bannerRefreshRate = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"bannerRefreshRate"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).bannerMaxImageSize = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"bannerMaxImageSize"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).bannerClickThru = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"bannerClickThru"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).helpUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"helpUrl"]);
        ((ComAdironBusmeApiBuspass *) NIL_CHK(bp)).bannerImageUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(api.attributes)) getWithId:@"bannerImage"]);
        if (((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(api)).childNodes != nil) {
          {
            id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(api)).childNodes iterator]);
            while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
              ComAdironBusmeApiAPIBase_Tag *message = ((ComAdironBusmeApiAPIBase_Tag *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
              if ([@"Message" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(message)).name]) {
                ComAdironBusmeApiMasterMessage *msg = [[[ComAdironBusmeApiMasterMessage alloc] init] autorelease];
                [((ComAdironBusmeApiMasterMessage *) NIL_CHK(msg)) loadParsedXMLWithComAdironBusmeApiAPIBase_Tag:message];
                [((id<JavaUtilList>) NIL_CHK(bp.initialMessages)) addWithId:msg];
              }
            }
          }
        }
        syncRate_ = -1;
        updateRate_ = -1;
        ready_ = YES;
        return bp;
      }
    }
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Exception%@", [((JavaLangIllegalArgumentException *) NIL_CHK(e)) getMessage]]];
    @throw [[[JavaIoIOException alloc] initWithNSString:[((JavaLangIllegalArgumentException *) NIL_CHK(e)) getMessage]] autorelease];
  }
  @catch (JavaIoIOException *e) {
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Exception%@", e]];
    @throw e;
  }
  return nil;
}

- (NSString *)getVersion {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).version_;
}

- (NSString *)getMode {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).mode;
}

- (NSString *)getName {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).name;
}

- (NSString *)getSlug {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).slug;
}

- (NSString *)getAuthUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).authUrl;
}

- (NSString *)getLoginUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).loginUrl;
}

- (NSString *)getRegisterUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).registerUrl;
}

- (NSString *)getLogoutUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).logoutUrl;
}

- (NSString *)getOauthLoginUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).oauthLoginUrl;
}

- (NSString *)getOauthLogoutUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).oauthLogoutUrl;
}

- (NSString *)getBannerImageUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).bannerImageUrl;
}

- (void)setPostlocTimeRateWithInt:(int)postlocTimeRate {
  self.postlocTimeRate = postlocTimeRate;
}

- (int)getPostlocTimeRate {
  @try {
    if (postlocTimeRate_ == -1) {
      postlocTimeRate_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).postloc_time_rate];
    }
    return postlocTimeRate_;
  }
  @catch (JavaLangException *e) {
    return 10000;
  }
}

- (int)getPostlocDistRate {
  @try {
    if (postlocDistRate_ == -1) {
      postlocDistRate_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).postloc_dist_rate];
    }
    return postlocDistRate_;
  }
  @catch (JavaLangException *e) {
    return 5;
  }
}

- (void)setPostlocDistRateWithInt:(int)postlocDistRate {
  self.postlocDistRate = postlocDistRate;
}

- (int)getCurlocTimeRate {
  @try {
    if (curlocTimeRate_ == -1) {
      curlocTimeRate_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).curloc_time_rate];
    }
    return curlocTimeRate_;
  }
  @catch (JavaLangException *e) {
    return 10000;
  }
}

- (void)setCurlocTimeRateWithInt:(int)curlocTimeRate {
  self.curlocTimeRate = curlocTimeRate;
}

- (NSString *)getLon {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).lon;
}

- (NSString *)getLat {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).lat;
}

- (NSString *)getTimezone {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).timezone;
}

- (NSString *)getTimeOffset {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).timeoffset;
}

- (NSString *)getDateFormat {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).datefmt;
}

- (NSString *)getRouteJourneyIdsUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getRouteJourneyIdsUrl;
}

- (NSString *)getRouteDefinitionUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getRouteDefinitionUrl;
}

- (NSString *)getJourneyLocationUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getJourneyLocationUrl;
}

- (NSString *)getMultipleJourneyLocationsUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getMultipleJourneyLocationsUrl;
}

- (NSString *)getPostJourneyLocationUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).postJourneyLocationUrl;
}

- (NSString *)getMessagesUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getMessagesUrl;
}

- (NSString *)getMessageUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getMessageUrl;
}

- (NSString *)getMarkersUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getMarkersUrl;
}

- (NSString *)getPostFeedbackUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).postFeedbackUrl;
}

- (NSString *)getPostUpdateUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).updateUrl;
}

- (NSString *)getRouteJourneyIds1Url {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).getRouteJourneyIds1Url;
}

- (NSString *)getMarkerClickThruUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).markerClickThru;
}

- (NSString *)getMessageClickThruUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).messageClickThru;
}

- (NSString *)getHelpUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).helpUrl;
}

- (NSString *)getBannerClickThruUrl {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).bannerClickThru;
}

- (int)getUpdateRate {
  @try {
    if (updateRate_ == -1) {
      updateRate_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).updateRate];
    }
    return updateRate_;
  }
  @catch (JavaLangException *e) {
    return 10000;
  }
}

- (void)setUpdateRateWithInt:(int)rate {
  updateRate_ = rate;
}

- (int)getActiveStartDisplayThreshold {
  @try {
    if (activeStartDisplayThreshold_ == -1) {
      activeStartDisplayThreshold_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).activeStartDisplayThreshold];
    }
    return activeStartDisplayThreshold_;
  }
  @catch (JavaLangException *e) {
    return 10 * 60 * 1000;
  }
}

- (void)setActiveStartDisplayThresholdWithInt:(int)rate {
  activeStartDisplayThreshold_ = rate;
}

- (int)getActiveEndWaitThreshold {
  @try {
    if (activeEndWaitThreshold_ == -1) {
      activeEndWaitThreshold_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).activeEndWaitThreshold];
    }
    return activeEndWaitThreshold_;
  }
  @catch (JavaLangException *e) {
    return 20 * 60 * 1000;
  }
}

- (void)setActiveEndWaitThresholdWithInt:(int)rate {
  activeEndWaitThreshold_ = rate;
}

- (double)getOffRouteDistanceThreshold {
  @try {
    if (offRouteDistanceThreshold_ == -1) {
      offRouteDistanceThreshold_ = [JavaLangDouble parseDoubleWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).offRouteDistanceThreshold];
    }
    return offRouteDistanceThreshold_;
  }
  @catch (JavaLangException *e) {
    return 300;
  }
}

- (int)getOffRouteCountThreshold {
  @try {
    if (offRouteCountThreshold_ == -1) {
      offRouteCountThreshold_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).offRouteCountThreshold];
    }
    return offRouteCountThreshold_;
  }
  @catch (JavaLangException *e) {
    return 4;
  }
}

- (double)getOffRouteTimeThreshold {
  @try {
    if (offRouteTimeThreshold_ == -1) {
      offRouteTimeThreshold_ = [JavaLangDouble parseDoubleWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).offRouteTimeThreshold];
    }
    return offRouteTimeThreshold_;
  }
  @catch (JavaLangException *e) {
    return 4 * 60 * 1000;
  }
}

- (void)setOffRouteDistanceThresholdWithDouble:(double)offRouteDistanceThreshold {
  self.offRouteDistanceThreshold = offRouteDistanceThreshold;
}

- (void)setOffRouteCountThresholdWithInt:(int)offRouteCountThreshold {
  self.offRouteCountThreshold = offRouteCountThreshold;
}

- (void)setOffRouteTimeThresholdWithDouble:(double)offRouteTimeThreshold {
  self.offRouteTimeThreshold = offRouteTimeThreshold;
}

- (int)getSyncRate {
  @try {
    if (syncRate_ == -1) {
      syncRate_ = [JavaLangInteger parseIntWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).syncRate];
    }
    return syncRate_;
  }
  @catch (JavaLangException *e) {
    return 60000;
  }
}

- (void)setSyncRateWithInt:(int)rate {
  syncRate_ = rate;
}

- (id<JavaUtilList>)getInitialMessages {
  return ((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).initialMessages;
}

- (long long int)getBannerMaxImageSize {
  @try {
    if (bannerMaxImageSize_ == -1) {
      bannerMaxImageSize_ = [JavaLangLong parseLongWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).bannerMaxImageSize];
    }
    return bannerMaxImageSize_;
  }
  @catch (JavaLangException *e) {
    return 25600;
  }
}

- (void)setBannerMaxImageSizeWithLongInt:(long long int)bannerMaxImageSize {
  self.bannerMaxImageSize = bannerMaxImageSize;
}

- (void)setBannerRefreshRateWithLongInt:(long long int)bannerRefreshRate {
  self.bannerRefreshRate = bannerRefreshRate;
}

- (long long int)getBannerRefreshRate {
  @try {
    if (bannerRefreshRate_ == -1) {
      bannerRefreshRate_ = [JavaLangLong parseLongWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).bannerRefreshRate];
    }
    return bannerRefreshRate_;
  }
  @catch (JavaLangException *e) {
    return 25600;
  }
}

- (ComAdironBusmeIntegrationBoundingBoxE6 *)getBoundingBox {
  @try {
    IOSObjectArray *box = [NIL_CHK(buspass_.box) split:@","];
    double nw_lon = [JavaLangDouble parseDoubleWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(box)) objectAtIndex:0])];
    double nw_lat = [JavaLangDouble parseDoubleWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(box)) objectAtIndex:1])];
    double se_lon = [JavaLangDouble parseDoubleWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(box)) objectAtIndex:2])];
    double se_lat = [JavaLangDouble parseDoubleWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(box)) objectAtIndex:3])];
    return [[[ComAdironBusmeIntegrationBoundingBoxE6 alloc] initWithDouble:nw_lat withDouble:se_lon withDouble:se_lat withDouble:nw_lon] autorelease];
  }
  @catch (JavaLangException *e) {
    [ComAdironBusmePlatformLog eWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"No box; %@", e]];
    return nil;
  }
}

- (void)logout {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:@"logout: "];
  [self postDeleteURLWithNSString:((ComAdironBusmeApiBuspass *) NIL_CHK(buspass_)).logoutUrl];
}

- (ComAdironBusmeApiBuspassAPI_Login *)authorizeWithNSString:(NSString *)authUrl
                                                withNSString:(NSString *)roleIntent
                                                withNSString:(NSString *)access_token {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"authorize: %@", access_token]];
  id<JavaUtilList> nameValuePairs = [[[JavaUtilArrayList alloc] initWithInt:2] autorelease];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"role_intent" withNSString:roleIntent] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"access_token" withNSString:access_token] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"app_version" withNSString:[self getBusmeAppVersionString]] autorelease]];
  ComAdironBusmeIntegrationHttpHttpResponse *resp = [self postURLResponseWithNSString:authUrl withJavaUtilList:nameValuePairs];
  IOSObjectArray *headers = [((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getAllHeaders];
  {
    IOSObjectArray *a__ = headers;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      ComAdironBusmeIntegrationHttpHeader *h = ((ComAdironBusmeIntegrationHttpHeader *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Header: %@ %@", [((ComAdironBusmeIntegrationHttpHeader *) NIL_CHK(h)) getName], [((ComAdironBusmeIntegrationHttpHeader *) NIL_CHK(h)) getValue]]];
    }
  }
  int status = [[((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getStatusLine] getStatusCode];
  ComAdironBusmeIntegrationHttpHttpEntity *ent = [((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getEntity];
  ComAdironBusmeApiBuspassAPI_Login *login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] init] autorelease];
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = roleIntent;
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken = access_token;
  if (status == 200) {
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"authorize: got : %@", tag]];
    if ([@"login" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
      login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"status"])] autorelease];
      if ([@"OK" isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status]) {
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).name = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"name"]);
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"email"]);
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"roleIntent"]);
        if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent == nil) {
          ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = roleIntent;
        }
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"roles"]);
        if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral != nil) {
          JavaUtilStringTokenizer *tok = [[[JavaUtilStringTokenizer alloc] initWithNSString:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral withNSString:@","] autorelease];
          while ([((JavaUtilStringTokenizer *) NIL_CHK(tok)) hasMoreElements]) {
            [((id<JavaUtilList>) NIL_CHK(login.roles)) addWithId:[((JavaUtilStringTokenizer *) NIL_CHK(tok)) nextToken]];
          }
        }
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"authToken"]);
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"authorize: returning a Login for %@ auth token %@", ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).name, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken]];
        if (![NIL_CHK(access_token) isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken]) {
          [ComAdironBusmePlatformLog iWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"AuthToken is refreshed! %@" , ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken, nil]];
        }
      }
      else {
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"authorize: failed %@." , ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status, nil]];
      }
    }
    else {
      login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:@"NotProperResponse"] autorelease];
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:@"authorize: failed. "];
    }
  }
  else {
    login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:@"NetworkProblem"] autorelease];
  }
  ;
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"authorize() : status = %d", status]];
  return login;
}

- (ComAdironBusmeApiBuspassAPI_Login *)passwordLoginWithNSString:(NSString *)loginUrl
                                                    withNSString:(NSString *)roleIntent
                                                    withNSString:(NSString *)id_
                                                    withNSString:(NSString *)password {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordLogin: %@", id_]];
  id<JavaUtilList> nameValuePairs = [[[JavaUtilArrayList alloc] initWithInt:2] autorelease];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"email" withNSString:id_] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"password" withNSString:password] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"role_intent" withNSString:roleIntent] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"app_version" withNSString:[self getBusmeAppVersionString]] autorelease]];
  ComAdironBusmeIntegrationHttpHttpResponse *resp = [self postURLResponseWithNSString:loginUrl withJavaUtilList:nameValuePairs];
  IOSObjectArray *headers = [((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getAllHeaders];
  {
    IOSObjectArray *a__ = headers;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      ComAdironBusmeIntegrationHttpHeader *h = ((ComAdironBusmeIntegrationHttpHeader *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Header: %@ %@", [((ComAdironBusmeIntegrationHttpHeader *) NIL_CHK(h)) getName], [((ComAdironBusmeIntegrationHttpHeader *) NIL_CHK(h)) getValue]]];
    }
  }
  int status = [[((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getStatusLine] getStatusCode];
  ComAdironBusmeIntegrationHttpHttpEntity *ent = [((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getEntity];
  ComAdironBusmeApiBuspassAPI_Login *login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] init] autorelease];
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = roleIntent;
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = id_;
  if (status == 200) {
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordLogin: got : %@", tag]];
    if ([@"login" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
      login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"status"])] autorelease];
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).name = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"name"]);
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"email"]);
      if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email == nil) {
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = id_;
      }
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"roleIntent"]);
      if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent == nil) {
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = roleIntent;
      }
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"roles"]);
      if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral != nil) {
        JavaUtilStringTokenizer *tok = [[[JavaUtilStringTokenizer alloc] initWithNSString:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral withNSString:@","] autorelease];
        while ([((JavaUtilStringTokenizer *) NIL_CHK(tok)) hasMoreElements]) {
          [((id<JavaUtilList>) NIL_CHK(login.roles)) addWithId:[((JavaUtilStringTokenizer *) NIL_CHK(tok)) nextToken]];
        }
      }
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"authToken"]);
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordLogin: returning %@ for %@ tok %@" , ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken, nil]];
    }
    else {
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status = @"NotProperResponse";
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:@"passwordLogin: failed. "];
    }
  }
  else {
    ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status = @"NetworkProblem";
  }
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordLogin() : status = %d", status]];
  return login;
}

- (ComAdironBusmeApiBuspassAPI_Login *)passwordRegistrationWithNSString:(NSString *)loginUrl
                                                           withNSString:(NSString *)roleIntent
                                                           withNSString:(NSString *)id_
                                                           withNSString:(NSString *)password
                                                           withNSString:(NSString *)driverAuthCode {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordRegistration: %@", id_]];
  id<JavaUtilList> nameValuePairs = [[[JavaUtilArrayList alloc] initWithInt:2] autorelease];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"email" withNSString:id_] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"password" withNSString:password] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"password_confirmation" withNSString:password] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"role_intent" withNSString:roleIntent] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"auth_code" withNSString:driverAuthCode] autorelease]];
  [((id<JavaUtilList>) NIL_CHK(nameValuePairs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"app_version" withNSString:[self getBusmeAppVersionString]] autorelease]];
  ComAdironBusmeIntegrationHttpHttpResponse *resp = [self postURLResponseWithNSString:loginUrl withJavaUtilList:nameValuePairs];
  IOSObjectArray *headers = [((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getAllHeaders];
  {
    IOSObjectArray *a__ = headers;
    int n__ = (int) [((IOSObjectArray *) NIL_CHK(a__)) count];
    for (int i__ = 0; i__ < n__; i__++) {
      ComAdironBusmeIntegrationHttpHeader *h = ((ComAdironBusmeIntegrationHttpHeader *) [((IOSObjectArray *) NIL_CHK(a__)) objectAtIndex:i__]);
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Header: %@ %@", [((ComAdironBusmeIntegrationHttpHeader *) NIL_CHK(h)) getName], [((ComAdironBusmeIntegrationHttpHeader *) NIL_CHK(h)) getValue]]];
    }
  }
  int status = [[((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getStatusLine] getStatusCode];
  ComAdironBusmeIntegrationHttpHttpEntity *ent = [((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getEntity];
  ComAdironBusmeApiBuspassAPI_Login *login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] init] autorelease];
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = id_;
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = roleIntent;
  ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).driverAuthCode = driverAuthCode;
  if (status == 200) {
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordRegistration: got : %@", tag]];
    if ([@"login" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
      login = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"name"])] autorelease];
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"email"]);
      if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email == nil) {
        ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email = id_;
      }
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).roleIntent = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"roleIntent"]);
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"roles"]);
      if (((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral != nil) {
        JavaUtilStringTokenizer *tok = [[[JavaUtilStringTokenizer alloc] initWithNSString:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).rolesLiteral withNSString:@","] autorelease];
        while ([((JavaUtilStringTokenizer *) NIL_CHK(tok)) hasMoreElements]) {
          [((id<JavaUtilList>) NIL_CHK(login.roles)) addWithId:[((JavaUtilStringTokenizer *) NIL_CHK(tok)) nextToken]];
        }
      }
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"authToken"]);
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"status"]);
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordRegistration: returning %@ for %@ tok %@" , ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).email, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).authToken, nil]];
    }
    else {
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status = @"NotProperResponse";
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:@"passwordRegistration: failed. "];
    }
  }
  else {
    ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).status = @"NetworkProblem";
    ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(login)).reason = [[((ComAdironBusmeIntegrationHttpHttpResponse *) NIL_CHK(resp)) getStatusLine] description];
  }
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiBuspassAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"passwordRegistration() : status = %d", status]];
  return login;
}

+ (void)initialize {
  if (self == [ComAdironBusmeApiBuspassAPI class]) {
    JreOperatorRetainedAssign(&ComAdironBusmeApiBuspassAPI_LOGTAG_, [[IOSClass classWithClass:[ComAdironBusmeApiBuspassAPI class]] getName]);
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&buspass_, nil);
  JreOperatorRetainedAssign(&platform_, nil);
  JreOperatorRetainedAssign(&appVersion_, nil);
  JreOperatorRetainedAssign(&apiUrl_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmeApiBuspassAPI *typedCopy = (ComAdironBusmeApiBuspassAPI *) copy;
  typedCopy.apiUrl = apiUrl_;
  typedCopy.appVersion = appVersion_;
  typedCopy.platform = platform_;
  typedCopy.buspass = buspass_;
  typedCopy.ready = ready_;
  typedCopy.postlocTimeRate = postlocTimeRate_;
  typedCopy.postlocDistRate = postlocDistRate_;
  typedCopy.curlocTimeRate = curlocTimeRate_;
  typedCopy.updateRate = updateRate_;
  typedCopy.activeStartDisplayThreshold = activeStartDisplayThreshold_;
  typedCopy.activeEndWaitThreshold = activeEndWaitThreshold_;
  typedCopy.offRouteDistanceThreshold = offRouteDistanceThreshold_;
  typedCopy.offRouteCountThreshold = offRouteCountThreshold_;
  typedCopy.offRouteTimeThreshold = offRouteTimeThreshold_;
  typedCopy.syncRate = syncRate_;
  typedCopy.bannerMaxImageSize = bannerMaxImageSize_;
  typedCopy.bannerRefreshRate = bannerRefreshRate_;
}

@end
@implementation ComAdironBusmeApiBuspassAPI_Login

- (NSString *)status {
  return status_;
}
- (void)setStatus:(NSString *)status {
  JreOperatorRetainedAssign(&status_, status);
}
@synthesize status = status_;
- (NSString *)reason {
  return reason_;
}
- (void)setReason:(NSString *)reason {
  JreOperatorRetainedAssign(&reason_, reason);
}
@synthesize reason = reason_;
- (NSString *)name {
  return name_;
}
- (void)setName:(NSString *)name {
  JreOperatorRetainedAssign(&name_, name);
}
@synthesize name = name_;
- (NSString *)email {
  return email_;
}
- (void)setEmail:(NSString *)email {
  JreOperatorRetainedAssign(&email_, email);
}
@synthesize email = email_;
- (NSString *)driverAuthCode {
  return driverAuthCode_;
}
- (void)setDriverAuthCode:(NSString *)driverAuthCode {
  JreOperatorRetainedAssign(&driverAuthCode_, driverAuthCode);
}
@synthesize driverAuthCode = driverAuthCode_;
- (NSString *)roleIntent {
  return roleIntent_;
}
- (void)setRoleIntent:(NSString *)roleIntent {
  JreOperatorRetainedAssign(&roleIntent_, roleIntent);
}
@synthesize roleIntent = roleIntent_;
- (NSString *)rolesLiteral {
  return rolesLiteral_;
}
- (void)setRolesLiteral:(NSString *)rolesLiteral {
  JreOperatorRetainedAssign(&rolesLiteral_, rolesLiteral);
}
@synthesize rolesLiteral = rolesLiteral_;
- (id<JavaUtilList>)roles {
  return roles_;
}
- (void)setRoles:(id<JavaUtilList>)roles {
  JreOperatorRetainedAssign(&roles_, roles);
}
@synthesize roles = roles_;
- (NSString *)authToken {
  return authToken_;
}
- (void)setAuthToken:(NSString *)authToken {
  JreOperatorRetainedAssign(&authToken_, authToken);
}
@synthesize authToken = authToken_;

- (id)init {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&reason_, @"");
    JreOperatorRetainedAssign(&roles_, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  return self;
}

- (id)initComAdironBusmeApiBuspassAPI_LoginWithNSString:(NSString *)status {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&reason_, @"");
    JreOperatorRetainedAssign(&roles_, [[[JavaUtilArrayList alloc] init] autorelease]);
    self.status = status;
  }
  return self;
}

- (id)initWithNSString:(NSString *)status {
  return [self initComAdironBusmeApiBuspassAPI_LoginWithNSString:status];
}

- (id)initWithNSString:(NSString *)status
          withNSString:(NSString *)reason {
  if ((self = [self initComAdironBusmeApiBuspassAPI_LoginWithNSString:status])) {
    self.reason = reason;
  }
  return self;
}

- (BOOL)hasRoleWithNSString:(NSString *)name {
  return [((id<JavaUtilList>) NIL_CHK(roles_)) containsWithId:name];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&authToken_, nil);
  JreOperatorRetainedAssign(&roles_, nil);
  JreOperatorRetainedAssign(&rolesLiteral_, nil);
  JreOperatorRetainedAssign(&roleIntent_, nil);
  JreOperatorRetainedAssign(&driverAuthCode_, nil);
  JreOperatorRetainedAssign(&email_, nil);
  JreOperatorRetainedAssign(&name_, nil);
  JreOperatorRetainedAssign(&reason_, nil);
  JreOperatorRetainedAssign(&status_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmeApiBuspassAPI_Login *typedCopy = (ComAdironBusmeApiBuspassAPI_Login *) copy;
  typedCopy.status = status_;
  typedCopy.reason = reason_;
  typedCopy.name = name_;
  typedCopy.email = email_;
  typedCopy.driverAuthCode = driverAuthCode_;
  typedCopy.roleIntent = roleIntent_;
  typedCopy.rolesLiteral = rolesLiteral_;
  typedCopy.roles = roles_;
  typedCopy.authToken = authToken_;
}

@end
