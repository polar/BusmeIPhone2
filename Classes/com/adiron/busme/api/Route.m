//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/src/main/java/com/adiron/busme/api/Route.java
//
//  Created by polar on 5/25/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/adiron/busme/api/APIBase.h"
#import "com/adiron/busme/api/JourneyLocation.h"
#import "com/adiron/busme/api/JourneyPattern.h"
#import "com/adiron/busme/api/NameId.h"
#import "com/adiron/busme/api/Route.h"
#import "com/adiron/busme/integration/GeoPoint.h"
#import "com/adiron/busme/platform/ActivityAPI.h"
#import "com/adiron/busme/platform/GeoPathUtils.h"
#import "com/adiron/busme/platform/Log.h"
#import "java/lang/Boolean.h"
#import "java/lang/Double.h"
#import "java/lang/Integer.h"
#import "java/lang/Math.h"
#import "java/util/ArrayList.h"
#import "java/util/Calendar.h"
#import "java/util/Collections.h"
#import "java/util/Date.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "org/osmdroid/api/IGeoPoint.h"

@implementation ComAdironBusmeApiRoute

static NSString * ComAdironBusmeApiRoute_LOGTAG_;

- (ComAdironBusmePlatformActivityAPI *)busAPI {
  return busAPI_;
}
- (void)setBusAPI:(ComAdironBusmePlatformActivityAPI *)busAPI {
  JreOperatorRetainedAssign(&busAPI_, busAPI);
}
@synthesize busAPI = busAPI_;
- (NSString *)name {
  return name_;
}
- (void)setName:(NSString *)name {
  JreOperatorRetainedAssign(&name_, name);
}
@synthesize name = name_;
- (NSString *)type {
  return type_;
}
- (void)setType:(NSString *)type {
  JreOperatorRetainedAssign(&type_, type);
}
@synthesize type = type_;
- (NSString *)id_ {
  return id__;
}
- (void)setId_:(NSString *)id_ {
  JreOperatorRetainedAssign(&id__, id_);
}
@synthesize id_ = id__;
- (NSString *)code {
  return code_;
}
- (void)setCode:(NSString *)code {
  JreOperatorRetainedAssign(&code_, code);
}
@synthesize code = code_;
- (NSString *)direction {
  return direction_;
}
- (void)setDirection:(NSString *)direction {
  JreOperatorRetainedAssign(&direction_, direction);
}
@synthesize direction = direction_;
- (NSString *)vid {
  return vid_;
}
- (void)setVid:(NSString *)vid {
  JreOperatorRetainedAssign(&vid_, vid);
}
@synthesize vid = vid_;
- (NSString *)workingVid {
  return workingVid_;
}
- (void)setWorkingVid:(NSString *)workingVid {
  JreOperatorRetainedAssign(&workingVid_, workingVid);
}
@synthesize workingVid = workingVid_;
@synthesize sort = sort_;
@synthesize version_ = version__;
@synthesize nw_lon = nw_lon_;
@synthesize nw_lat = nw_lat_;
@synthesize se_lon = se_lon_;
@synthesize se_lat = se_lat_;
@synthesize locationRefreshRate = locationRefreshRate_;
@synthesize startOffset = startOffset_;
@synthesize duration = duration_;
@synthesize startTime = startTime_;
@synthesize endTime = endTime_;
- (NSString *)patternid {
  return patternid_;
}
- (void)setPatternid:(NSString *)patternid {
  JreOperatorRetainedAssign(&patternid_, patternid);
}
@synthesize patternid = patternid_;
- (id<JavaUtilList>)patternids {
  return patternids_;
}
- (void)setPatternids:(id<JavaUtilList>)patternids {
  JreOperatorRetainedAssign(&patternids_, patternids);
}
@synthesize patternids = patternids_;
- (id<OrgOsmdroidApiIGeoPoint>)lastKnownLocation {
  return lastKnownLocation_;
}
- (void)setLastKnownLocation:(id<OrgOsmdroidApiIGeoPoint>)lastKnownLocation {
  JreOperatorRetainedAssign(&lastKnownLocation_, lastKnownLocation);
}
@synthesize lastKnownLocation = lastKnownLocation_;
@synthesize lastKnownDirection = lastKnownDirection_;
- (NSString *)lastKnownTime {
  return lastKnownTime_;
}
- (void)setLastKnownTime:(NSString *)lastKnownTime {
  JreOperatorRetainedAssign(&lastKnownTime_, lastKnownTime);
}
@synthesize lastKnownTime = lastKnownTime_;
@synthesize lastKnownDistance = lastKnownDistance_;
@synthesize onRoute = onRoute_;
@synthesize lastKnownTimeDiff = lastKnownTimeDiff_;
- (ComAdironBusmeIntegrationGeoPoint *)zoomCenter {
  return zoomCenter_;
}
- (void)setZoomCenter:(ComAdironBusmeIntegrationGeoPoint *)zoomCenter {
  JreOperatorRetainedAssign(&zoomCenter_, zoomCenter);
}
@synthesize zoomCenter = zoomCenter_;
@synthesize reported = reported_;
@synthesize reporting = reporting_;
- (id<JavaUtilList>)journeyPatterns {
  return journeyPatterns_;
}
- (void)setJourneyPatterns:(id<JavaUtilList>)journeyPatterns {
  JreOperatorRetainedAssign(&journeyPatterns_, journeyPatterns);
}
@synthesize journeyPatterns = journeyPatterns_;

+ (NSString *)LOGTAG {
  return ComAdironBusmeApiRoute_LOGTAG_;
}

- (id)init {
  if ((self = [super init])) {
    version__ = -1;
    locationRefreshRate_ = 10;
    JreOperatorRetainedAssign(&patternids_, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&lastKnownLocation_, nil);
    JreOperatorRetainedAssign(&journeyPatterns_, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&busAPI_, nil);
  }
  return self;
}

- (int)getSort {
  return sort_;
}

- (void)postSerializeWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)api {
  JreOperatorRetainedAssign(&busAPI_, api);
}

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)api {
  if ((self = [super init])) {
    version__ = -1;
    locationRefreshRate_ = 10;
    JreOperatorRetainedAssign(&patternids_, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&lastKnownLocation_, nil);
    JreOperatorRetainedAssign(&journeyPatterns_, [[[JavaUtilArrayList alloc] init] autorelease]);
    JreOperatorRetainedAssign(&busAPI_, api);
  }
  return self;
}

- (long long int)getVersion {
  return version__;
}

- (ComAdironBusmeApiNameId *)getNameId {
  return [[[ComAdironBusmeApiNameId alloc] initWithNSStringArray:[IOSObjectArray arrayWithObjects:(id[]){ name_, id__, [self isJourney] ? @"J" : @"R", [NSString stringWithFormat:@"%qi", version__] } count:4 type:[IOSClass classWithClass:[NSString class]]]] autorelease];
}

- (NSString *)getId {
  return id__;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getCode {
  return code_;
}

- (id<JavaUtilList>)getPaths {
  id<JavaUtilList> paths = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) size]] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComAdironBusmeApiJourneyPattern *jp = ((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<JavaUtilList>) NIL_CHK(paths)) addWithId:[((ComAdironBusmeApiJourneyPattern *) NIL_CHK(jp)) getPath]];
    }
  }
  return paths;
}

- (int)getPathCount {
  return [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) size];
}

- (IOSObjectArray *)getPathWithInt:(int)index {
  return [[((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) getWithInt:index]) getPath] clone];
}

- (NSString *)getVid {
  return vid_;
}

- (void)setVidWithNSString:(NSString *)vid {
  self.vid = vid;
}

- (NSString *)getWorkingVid {
  return workingVid_;
}

- (void)setWorkingVidWithNSString:(NSString *)workingVid {
  self.workingVid = workingVid;
}

- (int)getLastKnownTimeDiff {
  return lastKnownTimeDiff_;
}

- (NSString *)getLastKnownTime {
  return lastKnownTime_;
}

- (id<OrgOsmdroidApiIGeoPoint>)getLastKnownLocation {
  return lastKnownLocation_;
}

- (double)getLastKnownDistance {
  return lastKnownDistance_;
}

- (float)getLastKnownDirection {
  return lastKnownDirection_;
}

- (BOOL)isOnRoute {
  return onRoute_;
}

- (BOOL)isJourney {
  return [NIL_CHK(type_) isEqual:@"journey"];
}

- (BOOL)isPattern {
  return [NIL_CHK(type_) isEqual:@"pattern"];
}

- (BOOL)isActiveJourney {
  return [self isJourney] && [self getLastKnownLocation] != nil;
}

- (BOOL)isStartingJourney {
  return [self isStartingJourneyWithInt:[((ComAdironBusmePlatformActivityAPI *) NIL_CHK(busAPI_)) getActiveStartDisplayThreshold] withLongInt:[((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) getTime]];
}

- (BOOL)isStartingJourneyWithInt:(int)threshold
                     withLongInt:(long long int)time {
  if ([self isJourney]) {
    if ([self getLastKnownLocation] == nil) {
      double startMeasure = [self getStartingMeasureWithInt:threshold withLongInt:time];
      return [self isJourney] && 0.0 < startMeasure && startMeasure < 1.0;
    }
  }
  return NO;
}

- (BOOL)isRouteDefinition {
  return [NIL_CHK(type_) isEqual:@"route"];
}

- (NSString *)getDirection {
  return direction_;
}

- (NSString *)getPatternId {
  return patternid_;
}

- (id<JavaUtilList>)getPatternIds {
  return patternids_;
}

- (long long int)getStartTimeWithJavaUtilDate:(JavaUtilDate *)day {
  JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setTimeWithJavaUtilDate:day];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_MINUTE withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_SECOND withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) addWithInt:JavaUtilCalendar_MINUTE withInt:startOffset_];
  JavaUtilDate *startTime = [((JavaUtilCalendar *) NIL_CHK(cal)) getTime];
  return [((JavaUtilDate *) NIL_CHK(startTime)) getTime];
}

- (long long int)getEndTimeWithJavaUtilDate:(JavaUtilDate *)day {
  JavaUtilCalendar *cal = [JavaUtilCalendar getInstance];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setTimeWithJavaUtilDate:day];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_HOUR_OF_DAY withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_MINUTE withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_SECOND withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) setWithInt:JavaUtilCalendar_MILLISECOND withInt:0];
  [((JavaUtilCalendar *) NIL_CHK(cal)) addWithInt:JavaUtilCalendar_MINUTE withInt:startOffset_];
  [((JavaUtilCalendar *) NIL_CHK(cal)) addWithInt:JavaUtilCalendar_MINUTE withInt:duration_];
  JavaUtilDate *endTime = [((JavaUtilCalendar *) NIL_CHK(cal)) getTime];
  return [((JavaUtilDate *) NIL_CHK(endTime)) getTime];
}

- (long long int)getStartTime {
  return [self getStartTimeWithJavaUtilDate:[[[JavaUtilDate alloc] init] autorelease]];
}

- (long long int)getEndTime {
  return [self getEndTimeWithJavaUtilDate:[[[JavaUtilDate alloc] init] autorelease]];
}

- (int)getLocationRefreshRate {
  return locationRefreshRate_;
}

- (id<OrgOsmdroidApiIGeoPoint>)getZoomCenter {
  if (zoomCenter_ != nil) {
    return zoomCenter_;
  }
  double lat = se_lat_ + (nw_lat_ - se_lat_) / 2.0;
  double dx = nw_lon_ - se_lon_;
  double lon = se_lon_ + dx / 2;
  lon = lon < -180 ? lon + 360 : lon;
  lon = lon > 180 ? lon - 360 : lon;
  JreOperatorRetainedAssign(&zoomCenter_, [[[ComAdironBusmeIntegrationGeoPoint alloc] initWithInt:(int) (lat * 1E6) withInt:(int) (lon * 1E6)] autorelease]);
  return zoomCenter_;
}

- (int)getLongitudeSpanE6 {
  double dx = [JavaLangMath absWithDouble:nw_lon_ - se_lon_];
  dx = dx > 180 ? 360 - dx : dx;
  dx = dx * 1.1;
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiRoute_LOGTAG_ withNSString:[NSString stringWithFormat:@"getLongitudeSpanE6 = %f", dx]];
  return (int) (dx * 1E6);
}

- (int)getLatitudeSpanE6 {
  double dy = [JavaLangMath absWithDouble:nw_lat_ - se_lat_];
  dy = dy * 1.2;
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiRoute_LOGTAG_ withNSString:[NSString stringWithFormat:@"getLatitudeSpanE6 = %f", dy]];
  return (int) (dy * 1E6);
}

- (BOOL)isNearRouteWithOrgOsmdroidApiIGeoPoint:(id<OrgOsmdroidApiIGeoPoint>)iGeoPoint
                                    withDouble:(double)d {
  BOOL isNearRoute = NO;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComAdironBusmeApiJourneyPattern *jp = ((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      IOSObjectArray *path = [((ComAdironBusmeApiJourneyPattern *) NIL_CHK(jp)) getPath];
      isNearRoute |= [ComAdironBusmePlatformGeoPathUtils isOnPathWithOrgOsmdroidApiIGeoPointArray:path withOrgOsmdroidApiIGeoPoint:iGeoPoint withDouble:d];
      if (isNearRoute) {
        break;
      }
    }
  }
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiRoute_LOGTAG_ withNSString:[NSString stringWithFormat:@"isNearRoute %@ : %@", name_, [JavaLangBoolean toStringWithBOOL:isNearRoute]]];
  return isNearRoute;
}

- (id<JavaUtilList>)whereOnPathsWithOrgOsmdroidApiIGeoPoint:(id<OrgOsmdroidApiIGeoPoint>)iGeoPoint
                                                    withInt:(int)buffer {
  id<JavaUtilList> result = [[[JavaUtilArrayList alloc] init] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComAdironBusmeApiJourneyPattern *jp = ((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      IOSObjectArray *path = [((ComAdironBusmeApiJourneyPattern *) NIL_CHK(jp)) getPath];
      id<JavaUtilList> possibles = [ComAdironBusmePlatformGeoPathUtils whereOnPathWithOrgOsmdroidApiIGeoPointArray:path withComAdironBusmeIntegrationGeoPoint:(ComAdironBusmeIntegrationGeoPoint *) iGeoPoint withDouble:buffer];
      [((id<JavaUtilList>) NIL_CHK(result)) addAllWithJavaUtilCollection:possibles];
    }
  }
  return result;
}

- (id<OrgOsmdroidApiIGeoPoint>)getNearestStartPointWithOrgOsmdroidApiIGeoPoint:(id<OrgOsmdroidApiIGeoPoint>)iGeoPoint
                                                                       withInt:(int)feet {
  id<OrgOsmdroidApiIGeoPoint> nearest = nil;
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComAdironBusmeApiJourneyPattern *jp = ((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      IOSObjectArray *path = [((ComAdironBusmeApiJourneyPattern *) NIL_CHK(jp)) getPath];
      double dist = [ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:iGeoPoint withOrgOsmdroidApiIGeoPoint:((id<OrgOsmdroidApiIGeoPoint>) [((IOSObjectArray *) NIL_CHK(path)) objectAtIndex:0])];
      if (dist < feet) {
        if (nearest == nil) {
          nearest = ((id<OrgOsmdroidApiIGeoPoint>) [((IOSObjectArray *) NIL_CHK(path)) objectAtIndex:0]);
        }
        else if ([ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:((id<OrgOsmdroidApiIGeoPoint>) [((IOSObjectArray *) NIL_CHK(path)) objectAtIndex:0]) withOrgOsmdroidApiIGeoPoint:iGeoPoint] < [ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:nearest withOrgOsmdroidApiIGeoPoint:iGeoPoint]) {
          nearest = ((id<OrgOsmdroidApiIGeoPoint>) [((IOSObjectArray *) NIL_CHK(path)) objectAtIndex:0]);
        }
      }
    }
  }
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiRoute_LOGTAG_ withNSString:[NSString stringWithFormat:@"getNearestStartPoint(%@) = %@", name_, nearest]];
  return nearest;
}

- (id<OrgOsmdroidApiIGeoPoint>)getStartingPoint {
  return ((ComAdironBusmeIntegrationGeoPoint *) [[((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) getWithInt:0]) getPath] objectAtIndex:0]);
}

- (double)getStartingMeasure {
  return [self getStartingMeasureWithInt:[((ComAdironBusmePlatformActivityAPI *) NIL_CHK(busAPI_)) getActiveStartDisplayThreshold] withLongInt:[((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) getTime]];
}

- (double)getStartingMeasureWithInt:(int)threshold
                        withLongInt:(long long int)time {
  long long int timediff = [self getStartTime] - time;
  double ret = -1.0;
  double diff = 0;
  id<OrgOsmdroidApiIGeoPoint> loc = [self getLastKnownLocation];
  if (loc != nil) {
    ComAdironBusmeIntegrationGeoPoint *start = (ComAdironBusmeIntegrationGeoPoint *) [self getStartingPoint];
    double distance = [((ComAdironBusmeIntegrationGeoPoint *) NIL_CHK(start)) distanceToWithOrgOsmdroidApiIGeoPoint:loc];
    if (0 <= distance && distance <= 5) {
      if (0 <= timediff && timediff <= threshold) {
        diff = threshold - timediff;
        ret = (diff * diff) / ((double) threshold * (double) threshold);
      }
      else {
        ret = -1.0;
      }
    }
    else {
      ret = 1.1;
    }
  }
  else {
    if (0 <= timediff && timediff <= threshold) {
      diff = threshold - timediff;
      ret = (diff * diff) / ((double) threshold * (double) threshold);
    }
    else {
      ret = -1.0;
    }
  }
  return ret;
}

- (void)setPatternIdWithInt:(int)index
               withNSString:(NSString *)id_ {
  if ([((id<JavaUtilList>) NIL_CHK(patternids_)) size] == index) {
    [((id<JavaUtilList>) NIL_CHK(patternids_)) addWithId:id_];
  }
  else {
    [((id<JavaUtilList>) NIL_CHK(patternids_)) setWithInt:index withId:id_];
  }
}

- (void)loadParsedXMLWithComAdironBusmeApiAPIBase_Tag:(ComAdironBusmeApiAPIBase_Tag *)n {
  JreOperatorRetainedAssign(&type_, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"type"]));
  JreOperatorRetainedAssign(&id__, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"id"]));
  JreOperatorRetainedAssign(&name_, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"name"]));
  JreOperatorRetainedAssign(&direction_, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"dir"]));
  JreOperatorRetainedAssign(&code_, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"routeCode"]));
  version__ = [JavaLangInteger parseIntWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"version"])];
  JreOperatorRetainedAssign(&patternid_, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"patternid"]));
  JreOperatorRetainedAssign(&vid_, ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"vid"]));
  NSString *val;
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"duration"]);
  duration_ = (val != nil ? [JavaLangInteger parseIntWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"sort"]);
  sort_ = (val != nil ? [JavaLangInteger parseIntWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"locationRefreshRate"]);
  locationRefreshRate_ = (val != nil ? [JavaLangInteger parseIntWithNSString:val] : 10);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"nw_lon"]);
  nw_lon_ = (val != nil ? [JavaLangDouble parseDoubleWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"nw_lat"]);
  nw_lat_ = (val != nil ? [JavaLangDouble parseDoubleWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"se_lat"]);
  se_lat_ = (val != nil ? [JavaLangDouble parseDoubleWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"se_lon"]);
  se_lon_ = (val != nil ? [JavaLangDouble parseDoubleWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"startOffset"]);
  startOffset_ = (val != nil ? [JavaLangInteger parseIntWithNSString:val] : 0);
  val = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"patternids"]);
  if (val != nil) {
    [JavaUtilCollections addAllWithJavaUtilCollection:patternids_ withNSObjectArray:[val split:@","]];
  }
}

- (IOSObjectArray *)pushCurrentLocationWithComAdironBusmeApiJourneyLocation:(ComAdironBusmeApiJourneyLocation *)loc {
  ComAdironBusmeIntegrationGeoPoint *gp = [[[ComAdironBusmeIntegrationGeoPoint alloc] initWithInt:((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).lat withInt:((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).lon] autorelease];
  @synchronized (self) {
    id<OrgOsmdroidApiIGeoPoint> lastLocation = lastKnownLocation_;
    JreOperatorRetainedAssign(&lastKnownLocation_, gp);
    lastKnownTimeDiff_ = ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).timediff;
    lastKnownDirection_ = ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).dir;
    lastKnownDistance_ = ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).distance;
    JreOperatorRetainedAssign(&lastKnownTime_, [((NSObject *) [[[JavaUtilDate alloc] initWithLongInt:((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).reported_time] autorelease]) description]);
    onRoute_ = ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).onroute;
    return [IOSObjectArray arrayWithObjects:(id[]){ lastLocation, lastKnownLocation_ } count:2 type:[IOSClass classWithProtocol:@protocol(OrgOsmdroidApiIGeoPoint)]];
  }
}

- (void)preSerialize {
}

- (void)dealloc {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmeApiRoute_LOGTAG_ withNSString:[NSString stringWithFormat:@"finalized name = %@ id = %@ %@", [self getName], [self getId], self]];
  JreOperatorRetainedAssign(&journeyPatterns_, nil);
  JreOperatorRetainedAssign(&zoomCenter_, nil);
  JreOperatorRetainedAssign(&lastKnownTime_, nil);
  JreOperatorRetainedAssign(&lastKnownLocation_, nil);
  JreOperatorRetainedAssign(&patternids_, nil);
  JreOperatorRetainedAssign(&patternid_, nil);
  JreOperatorRetainedAssign(&workingVid_, nil);
  JreOperatorRetainedAssign(&vid_, nil);
  JreOperatorRetainedAssign(&direction_, nil);
  JreOperatorRetainedAssign(&code_, nil);
  JreOperatorRetainedAssign(&id__, nil);
  JreOperatorRetainedAssign(&type_, nil);
  JreOperatorRetainedAssign(&name_, nil);
  JreOperatorRetainedAssign(&busAPI_, nil);
  [super dealloc];
}

- (BOOL)isReported {
  return lastKnownLocation_ != nil && reported_;
}

- (BOOL)isReporting {
  return reporting_;
}

- (void)setReportingWithBOOL:(BOOL)reporting {
  self.reporting = reporting;
}

- (void)setIdentificationWithNSString:(NSString *)type
                         withNSString:(NSString *)name
                         withNSString:(NSString *)id_
                              withInt:(int)version_ {
  self.name = name;
  self.type = type;
  self.id_ = id_;
  self.version_ = version_;
}

- (ComAdironBusmeApiJourneyPattern *)getJourneyPatternWithInt:(int)i {
  if (journeyPatterns_ == nil) {
    JreOperatorRetainedAssign(&journeyPatterns_, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  if (i < [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) size]) {
    return ((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) getWithInt:i]);
  }
  else {
    return nil;
  }
}

- (void)setJourneyPatternWithInt:(int)index
withComAdironBusmeApiJourneyPattern:(ComAdironBusmeApiJourneyPattern *)jp {
  if (journeyPatterns_ == nil) {
    JreOperatorRetainedAssign(&journeyPatterns_, [[[JavaUtilArrayList alloc] init] autorelease]);
  }
  if ([((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) size] == index) {
    [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) addWithId:jp];
  }
  else {
    [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) setWithInt:index withId:jp];
  }
}

- (BOOL)isFinished {
  id<OrgOsmdroidApiIGeoPoint> loc = [self getLastKnownLocation];
  if (loc != nil) {
    double distance = [self getLastKnownDistance];
    double path_distance = [((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) getWithInt:0]) getDistance];
    double dist_from_last = [[((ComAdironBusmeApiJourneyPattern *) [((id<JavaUtilList>) NIL_CHK(journeyPatterns_)) getWithInt:0]) getEndPoint] distanceToWithOrgOsmdroidApiIGeoPoint:loc];
    return path_distance - distance < 10 && dist_from_last < 3;
  }
  return NO;
}

+ (void)initialize {
  if (self == [ComAdironBusmeApiRoute class]) {
    JreOperatorRetainedAssign(&ComAdironBusmeApiRoute_LOGTAG_, [[IOSClass classWithClass:[ComAdironBusmeApiRoute class]] getName]);
  }
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmeApiRoute *typedCopy = (ComAdironBusmeApiRoute *) copy;
  typedCopy.busAPI = busAPI_;
  typedCopy.name = name_;
  typedCopy.type = type_;
  typedCopy.id_ = id__;
  typedCopy.code = code_;
  typedCopy.direction = direction_;
  typedCopy.vid = vid_;
  typedCopy.workingVid = workingVid_;
  typedCopy.sort = sort_;
  typedCopy.version_ = version__;
  typedCopy.nw_lon = nw_lon_;
  typedCopy.nw_lat = nw_lat_;
  typedCopy.se_lon = se_lon_;
  typedCopy.se_lat = se_lat_;
  typedCopy.locationRefreshRate = locationRefreshRate_;
  typedCopy.startOffset = startOffset_;
  typedCopy.duration = duration_;
  typedCopy.startTime = startTime_;
  typedCopy.endTime = endTime_;
  typedCopy.patternid = patternid_;
  typedCopy.patternids = patternids_;
  typedCopy.lastKnownLocation = lastKnownLocation_;
  typedCopy.lastKnownDirection = lastKnownDirection_;
  typedCopy.lastKnownTime = lastKnownTime_;
  typedCopy.lastKnownDistance = lastKnownDistance_;
  typedCopy.onRoute = onRoute_;
  typedCopy.lastKnownTimeDiff = lastKnownTimeDiff_;
  typedCopy.zoomCenter = zoomCenter_;
  typedCopy.reported = reported_;
  typedCopy.reporting = reporting_;
  typedCopy.journeyPatterns = journeyPatterns_;
}

@end
