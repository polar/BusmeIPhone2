//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/src/main/java/com/adiron/busme/platform/LoginManager.java
//
//  Created by polar on 5/25/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/adiron/busme/R.h"
#import "com/adiron/busme/api/Buspass.h"
#import "com/adiron/busme/api/BuspassAPI.h"
#import "com/adiron/busme/api/Route.h"
#import "com/adiron/busme/platform/ActivityAPI.h"
#import "com/adiron/busme/platform/Arguments.h"
#import "com/adiron/busme/platform/Handler.h"
#import "com/adiron/busme/platform/Log.h"
#import "com/adiron/busme/platform/LoginManager.h"
#import "java/io/IOException.h"
#import "java/lang/Boolean.h"
#import "java/util/List.h"

@implementation ComAdironBusmePlatformLoginManager

static NSString * ComAdironBusmePlatformLoginManager_LOGTAG_;

- (ComAdironBusmeApiBuspassAPI_Login *)currentLogin {
  return currentLogin_;
}
- (void)setCurrentLogin:(ComAdironBusmeApiBuspassAPI_Login *)currentLogin {
  JreOperatorRetainedAssign(&currentLogin_, currentLogin);
}
@synthesize currentLogin = currentLogin_;
- (NSString *)currentAuthToken {
  return currentAuthToken_;
}
- (void)setCurrentAuthToken:(NSString *)currentAuthToken {
  JreOperatorRetainedAssign(&currentAuthToken_, currentAuthToken);
}
@synthesize currentAuthToken = currentAuthToken_;
- (ComAdironBusmePlatformActivityAPI *)activityAPI {
  return activityAPI_;
}
- (void)setActivityAPI:(ComAdironBusmePlatformActivityAPI *)activityAPI {
  JreOperatorRetainedAssign(&activityAPI_, activityAPI);
}
@synthesize activityAPI = activityAPI_;

+ (NSString *)LOGTAG {
  return ComAdironBusmePlatformLoginManager_LOGTAG_;
}

+ (void)setLOGTAG:(NSString *)LOGTAG {
  JreOperatorRetainedAssign(&ComAdironBusmePlatformLoginManager_LOGTAG_, LOGTAG);
}

- (id)init {
  return [super init];
}

- (void)dWithNSString:(NSString *)format
    withNSObjectArray:(IOSObjectArray *)args {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:format , args, nil]];
}

- (BOOL)isLoggedIn {
  return currentLogin_ != nil;
}

- (ComAdironBusmeApiBuspassAPI_Login *)getLogin {
  return currentLogin_;
}

- (void)forgetLogin {
  JreOperatorRetainedAssign(&currentLogin_, nil);
  JreOperatorRetainedAssign(&currentAuthToken_, nil);
}

- (void)setActivityAPIWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)activityAPI {
  self.activityAPI = activityAPI;
}

- (ComAdironBusmePlatformActivityAPI *)getActivityAPI {
  return activityAPI_;
}

- (ComAdironBusmePlatformHandler *)getBackgroundHandler {
  if ([self getActivityAPI] != nil) {
    return [[self getActivityAPI] getBackgroundHandler];
  }
  return nil;
}

- (ComAdironBusmePlatformHandler *)getUIHandler {
  if ([self getActivityAPI] != nil) {
    return [[self getActivityAPI] getUIHandler];
  }
  return nil;
}

- (void)loginDriver {
  if (![[self getActivityAPI] isLoggedIn]) {
    [[self getActivityAPI] UIShowProgressDialogWithInt:ComAdironBusmeR_string_logging_in withInt:ComAdironBusmeR_string_logging_in_as_driver];
    [self ui_postLogin3WithNSString:@"driver" withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease]];
  }
  else {
    if ([[[self getActivityAPI] getLogin] hasRoleWithNSString:@"driver"]) {
      [[self getActivityAPI] UIShowProgressDialogWithInt:ComAdironBusmeR_string_logging_in withInt:ComAdironBusmeR_string_logging_in_as_driver];
      [self ui_postLogin3WithNSString:@"driver" withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease]];
    }
    else {
      [[self getActivityAPI] UIShowAlertDialogWithInt:ComAdironBusmeR_string_not_a_driver withInt:ComAdironBusmeR_string_need_driver_authorization];
    }
  }
}

- (void)loginPassenger {
  if (![[self getActivityAPI] isLoggedIn]) {
    [[self getActivityAPI] UIShowProgressDialogWithNSString:@"Logging in" withNSString:@"Logging you in as a passenger."];
    [self ui_postLogin3WithNSString:@"passenger" withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease]];
  }
  else {
    [[self getActivityAPI] onLocatorMenuSelectWithNSString:@"passenger"];
  }
}

- (void)ui_postLogin3WithNSString:(NSString *)roleIntent
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"ui_postLogin3(%@,%@,%@)" , roleIntent, success, failure, nil]];
  if ([self getBackgroundHandler] == nil) {
    return;
  }
  [[self getBackgroundHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformLoginManager_$1 alloc] initWithComAdironBusmePlatformLoginManager:self withNSString:roleIntent withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure] autorelease]];
}

- (void)launchLogin2WithNSString:(NSString *)roleIntent
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  if ([self getUIHandler] != nil) {
    [[self getUIHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformLoginManager_$2 alloc] initWithComAdironBusmePlatformLoginManager:self withNSString:roleIntent withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure] autorelease]];
  }
}

- (void)onLocatorSelectedWithJavaUtilList:(id<JavaUtilList>)routes {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"onStartPointSelected: %@ selected routes" , [((id<JavaUtilList>) NIL_CHK(routes)) size], nil]];
  if ([((id<JavaUtilList>) NIL_CHK(routes)) size] == 0) {
    return;
  }
  ComAdironBusmePlatformLoginManager_LoginContinuation *success = [[[ComAdironBusmePlatformLoginManager_$3 alloc] initWithComAdironBusmePlatformLoginManager:self withJavaUtilList:routes] autorelease];
  ComAdironBusmePlatformLoginManager_LoginContinuation *failure = [[[ComAdironBusmePlatformLoginManager_$4 alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease];
  if (![self isLoggedIn]) {
    [self ui_postLogin3WithNSString:@"passenger" withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure];
  }
  else {
    [[self getActivityAPI] UIShowWhichBusDialogWithNSString:[self getLogin].roleIntent withJavaUtilList:routes];
  }
}

- (ComAdironBusmeApiBuspassAPI_Login *)performLoginIfNotLogggedInWithNSString:(NSString *)roleIntent
                     withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
                     withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  [ComAdironBusmePlatformLog eWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"login()%@", [JavaLangBoolean toStringWithBOOL:[[self getActivityAPI] isReady]]]];
  [[self getActivityAPI] get];
  if (![self isLoggedIn]) {
    [self performAuthTokenLoginWithNSString:roleIntent withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure];
  }
  else {
    if (success != nil && [self getUIHandler] != nil) {
      [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(success)) setLoginWithComAdironBusmeApiBuspassAPI_Login:[self getLogin]];
      [[self getUIHandler] postWithJavaLangRunnable:success];
    }
  }
  return [self getLogin];
}

- (void)performAuthTokenLoginWithNSString:(NSString *)roleIntent
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:@"performAuthTokenLogin():"];
  NSString *auth_token = currentAuthToken_;
  if (auth_token == nil) {
    auth_token = [[self getActivityAPI] retreiveStoredAuthToken];
  }
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"performAuthTokenLogin() got :%@", auth_token]];
  if (auth_token != nil) {
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"performAuthTokenLogin: authorizing :%@", auth_token]];
    NSString *authUrl = [[self getActivityAPI] getAuthUrl];
    NSString *args = [[self getActivityAPI] getTrackingArgs];
    authUrl = args != nil ? [NSString stringWithFormat:@"%@?%@", authUrl, args] : authUrl;
    ComAdironBusmeApiBuspassAPI_Login *result = [[self getActivityAPI] authorizeWithNSString:authUrl withNSString:roleIntent withNSString:auth_token];
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"performAuthTokenLogin():authorizing result = %@", result]];
    if ([@"OK" isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status]) {
      if (success != nil && [self getUIHandler] != nil) {
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(success)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[self getUIHandler] postWithJavaLangRunnable:success];
      }
    }
    else if ([@"InvalidToken" isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status]) {
      if (failure != nil && [self getUIHandler] != nil) {
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(failure)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[self getUIHandler] postWithJavaLangRunnable:failure];
      }
    }
  }
  else {
    if (failure != nil && [self getUIHandler] != nil) {
      [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(failure)) setLoginWithComAdironBusmeApiBuspassAPI_Login:[[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:@"NoAuthToken"] autorelease]];
      [[self getUIHandler] postWithJavaLangRunnable:failure];
    }
  }
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"performAuthTokenLogin(): returning = %@", currentAuthToken_]];
}

- (void)ui_postQuietLoginWithNSString:(NSString *)roleIntent
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:@"ui_postQuietLogin: posting Login"];
  if ([self getBackgroundHandler] == nil) {
    return;
  }
  [[self getBackgroundHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformLoginManager_$5 alloc] initWithComAdironBusmePlatformLoginManager:self withNSString:roleIntent withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure] autorelease]];
}

- (void)ui_postPasswordLoginWithNSString:(NSString *)roleIntent
                            withNSString:(NSString *)email
                            withNSString:(NSString *)password
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  [ComAdironBusmePlatformLog vWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"ui_postPasswordLogin(%@,%@,%@,%@,%@) = isReady %@ " , roleIntent, email, password, success, failure, [[self getActivityAPI] isReady], nil]];
  if ([[self getActivityAPI] isReady]) {
    NSString *url = [[self getActivityAPI] getLoginUrl];
    [ComAdironBusmePlatformLog vWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"ui_postPasswordLogin() = %@", url]];
    if (url != nil) {
      [[self getBackgroundHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformLoginManager_$6 alloc] initWithComAdironBusmePlatformLoginManager:self withNSString:url withNSString:roleIntent withNSString:email withNSString:password withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure] autorelease]];
    }
  }
}

- (void)ui_postRegistrationWithNSString:(NSString *)roleIntent
                           withNSString:(NSString *)email
                           withNSString:(NSString *)password
                           withNSString:(NSString *)driverAuthCode
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  [self dWithNSString:@"ui_postRegistration(%s,%s,%s,%s,%s,%s) = isReady %s " withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:7, roleIntent, email, password, driverAuthCode, success, failure, [JavaLangBoolean valueOfWithBOOL:[[self getActivityAPI] isReady]] ]];
  if ([[self getActivityAPI] isReady]) {
    NSString *url = [[self getActivityAPI] getLoginUrl];
    [ComAdironBusmePlatformLog vWithNSString:ComAdironBusmePlatformLoginManager_LOGTAG_ withNSString:[NSString stringWithFormat:@"ui_postRegistration() = %@", url]];
    if (url != nil) {
      [[self getBackgroundHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformLoginManager_$7 alloc] initWithComAdironBusmePlatformLoginManager:self withNSString:url withNSString:roleIntent withNSString:email withNSString:password withNSString:driverAuthCode withComAdironBusmePlatformLoginManager_LoginContinuation:success withComAdironBusmePlatformLoginManager_LoginContinuation:failure] autorelease]];
    }
  }
}

- (void)ui_postLogout {
  [self dWithNSString:@"ui_postLogout()" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:0 ]];
  [[self getActivityAPI] forgetUser];
  if ([self getBackgroundHandler] == nil) {
    return;
  }
  [[self getBackgroundHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformLoginManager_$8 alloc] initWithComAdironBusmePlatformLoginManager:self] autorelease]];
}

+ (void)initialize {
  if (self == [ComAdironBusmePlatformLoginManager class]) {
    JreOperatorRetainedAssign(&ComAdironBusmePlatformLoginManager_LOGTAG_, @"LoginManager");
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&activityAPI_, nil);
  JreOperatorRetainedAssign(&currentAuthToken_, nil);
  JreOperatorRetainedAssign(&currentLogin_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager *typedCopy = (ComAdironBusmePlatformLoginManager *) copy;
  typedCopy.currentLogin = currentLogin_;
  typedCopy.currentAuthToken = currentAuthToken_;
  typedCopy.activityAPI = activityAPI_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_LoginContinuation

- (ComAdironBusmeApiBuspassAPI_Login *)login {
  return login_;
}
- (void)setLogin:(ComAdironBusmeApiBuspassAPI_Login *)login {
  JreOperatorRetainedAssign(&login_, login);
}
@synthesize login = login_;

- (void)setLoginWithComAdironBusmeApiBuspassAPI_Login:(ComAdironBusmeApiBuspassAPI_Login *)login {
  self.login = login;
}

- (ComAdironBusmeApiBuspassAPI_Login *)getLogin {
  return self.login;
}

- (void)run {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  return [super init];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&login_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_LoginContinuation *typedCopy = (ComAdironBusmePlatformLoginManager_LoginContinuation *) copy;
  typedCopy.login = login_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation

- (ComAdironBusmePlatformLoginManager *)this$1 {
  return this$1_;
}
- (void)setThis$1:(ComAdironBusmePlatformLoginManager *)this$1 {
  JreOperatorRetainedAssign(&this$1_, this$1);
}
@synthesize this$1 = this$1_;

- (void)run {
  [ComAdironBusmePlatformLog iWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"logginDriverSuccess: %@" , [self getLogin], nil]];
  [[this$1_ getActivityAPI] UIDismissProgressDialog];
  if ([self getLogin] != nil) {
    [[this$1_ getActivityAPI] storeCredentialsWithComAdironBusmeApiBuspassAPI_Login:[self getLogin]];
    this$1_.currentLogin = [self getLogin];
    this$1_.currentAuthToken = [self getLogin].authToken;
  }
  if ([[[this$1_ getActivityAPI] getLogin] hasRoleWithNSString:@"driver"]) {
    [[this$1_ getActivityAPI] onLocatorMenuSelectWithNSString:@"driver"];
  }
  else {
    [[this$1_ getActivityAPI] UIShowAlertDialogWithInt:ComAdironBusmeR_string_not_a_driver withInt:ComAdironBusmeR_string_need_driver_authorization];
  }
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation *typedCopy = (ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation

- (ComAdironBusmePlatformLoginManager *)this$1 {
  return this$1_;
}
- (void)setThis$1:(ComAdironBusmePlatformLoginManager *)this$1 {
  JreOperatorRetainedAssign(&this$1_, this$1);
}
@synthesize this$1 = this$1_;
- (NSString *)type {
  return type_;
}
- (void)setType:(NSString *)type {
  JreOperatorRetainedAssign(&type_, type);
}
@synthesize type = type_;

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
  }
  return self;
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)type {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
    self.type = type;
  }
  return self;
}

- (void)run {
  [ComAdironBusmePlatformLog iWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"logginDriveFailures: %@" , [self getLogin], nil]];
  [[this$1_ getActivityAPI] UIDismissProgressDialog];
  if ([@"InvalidPassword" isEqual:[self getLogin].status]) {
    ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Invalid Password"];
    [[this$1_ getActivityAPI] UILaunchLoginDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"password"] autorelease]];
  }
  else if ([@"NotAuthorized" isEqual:[self getLogin].status]) {
    ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Not Authorized as Driver. Please register Driver Auth Code or Cancel"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:YES];
    [[this$1_ getActivityAPI] UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"password"] autorelease]];
  }
  else if ([@"NotRegistered" isEqual:[self getLogin].status]) {
    ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Please Register as Driver (with Driver Auth Code)"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:NO];
    [[this$1_ getActivityAPI] UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"password"] autorelease]];
  }
  else if ([@"InvalidToken" isEqual:[self getLogin].status]) {
    [[this$1_ getActivityAPI] removeCredentialsAuthTokenWithComAdironBusmeApiBuspassAPI_Login:[self getLogin]];
    this$1_.currentAuthToken = nil;
    [[this$1_ getActivityAPI] UIDismissProgressDialog];
    [[this$1_ getActivityAPI] UIShowLongToastWithNSString:@"Invalid Token"];
  }
  else {
    if ([@"password" isEqual:type_]) {
      ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Some network error, please try again."];
      [[this$1_ getActivityAPI] UILaunchLoginDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"password"] autorelease]];
    }
    else if ([@"registration" isEqual:type_]) {
      ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Please Register as Driver (with Driver Auth Code)"];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:NO];
      [[this$1_ getActivityAPI] UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"registration"] autorelease]];
    }
    else {
      [[this$1_ getActivityAPI] UIShowLongToastWithNSString:[NSString stringWithFormat:@"Status : %@" , [self getLogin].status, nil]];
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&type_, nil);
  JreOperatorRetainedAssign(&this$1_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation *typedCopy = (ComAdironBusmePlatformLoginManager_DriverFailureLoginContinuation *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.type = type_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation

- (ComAdironBusmePlatformLoginManager *)this$1 {
  return this$1_;
}
- (void)setThis$1:(ComAdironBusmePlatformLoginManager *)this$1 {
  JreOperatorRetainedAssign(&this$1_, this$1);
}
@synthesize this$1 = this$1_;

- (void)run {
  [ComAdironBusmePlatformLog iWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"loginPassengerSuccess: %@" , [self getLogin], nil]];
  [[this$1_ getActivityAPI] UIDismissProgressDialog];
  if ([self getLogin] != nil) {
    [[this$1_ getActivityAPI] storeCredentialsWithComAdironBusmeApiBuspassAPI_Login:[self getLogin]];
    this$1_.currentLogin = [self getLogin];
    this$1_.currentAuthToken = [self getLogin].authToken;
  }
  [[this$1_ getActivityAPI] onLocatorMenuSelectWithNSString:@"driver"];
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation *typedCopy = (ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation

- (ComAdironBusmePlatformLoginManager *)this$1 {
  return this$1_;
}
- (void)setThis$1:(ComAdironBusmePlatformLoginManager *)this$1 {
  JreOperatorRetainedAssign(&this$1_, this$1);
}
@synthesize this$1 = this$1_;
- (NSString *)type {
  return type_;
}
- (void)setType:(NSString *)type {
  JreOperatorRetainedAssign(&type_, type);
}
@synthesize type = type_;

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
  }
  return self;
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)type {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
    self.type = type;
  }
  return self;
}

- (void)run {
  [ComAdironBusmePlatformLog iWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"loginPassengerFailure: %@" , [self getLogin], nil]];
  [[this$1_ getActivityAPI] UIDismissProgressDialog];
  if ([@"InvalidPassword" isEqual:[self getLogin].status]) {
    ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Invalid Password"];
    [[this$1_ getActivityAPI] UILaunchLoginDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"password"] autorelease]];
  }
  else if ([@"NotAuthorized" isEqual:[self getLogin].status]) {
    ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"driver"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Not Authorized as Driver. Please register Driver Auth Code or Cancel"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:NO];
    [[this$1_ getActivityAPI] UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"registration"] autorelease]];
  }
  else if ([@"NotRegistered" isEqual:[self getLogin].status]) {
    ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"passenger"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Please Register"];
    [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:YES];
    [[this$1_ getActivityAPI] UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"registration"] autorelease]];
  }
  else if ([@"InvalidToken" isEqual:[self getLogin].status]) {
    [[this$1_ getActivityAPI] removeCredentialsAuthTokenWithComAdironBusmeApiBuspassAPI_Login:[self getLogin]];
    this$1_.currentAuthToken = nil;
    [[this$1_ getActivityAPI] UIDismissProgressDialog];
    [[this$1_ getActivityAPI] UIShowLongToastWithNSString:@"Invalid Token"];
  }
  else {
    if ([@"password" isEqual:type_]) {
      ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"passenger"];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Some network error, please try again."];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:YES];
      [[this$1_ getActivityAPI] UILaunchLoginDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"password"] autorelease]];
    }
    else if ([@"registration" isEqual:type_]) {
      ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"email" withNSString:[self getLogin].email];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:@"passenger"];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"message" withNSString:@"Please Register"];
      [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putBooleanWithNSString:@"confirm" withBOOL:YES];
      [[this$1_ getActivityAPI] UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerSuccessLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_] autorelease] withComAdironBusmePlatformLoginManager_LoginContinuation:[[[ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation alloc] initWithComAdironBusmePlatformLoginManager:this$1_ withNSString:@"registration"] autorelease]];
    }
    else {
      [[this$1_ getActivityAPI] UIShowLongToastWithNSString:[NSString stringWithFormat:@"Status : %@" , [self getLogin].status, nil]];
    }
  }
}

- (void)dealloc {
  JreOperatorRetainedAssign(&type_, nil);
  JreOperatorRetainedAssign(&this$1_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation *typedCopy = (ComAdironBusmePlatformLoginManager_PassengerFailureLoginContinuation *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.type = type_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$1

- (ComAdironBusmePlatformLoginManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformLoginManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$roleIntent {
  return val$roleIntent_;
}
- (void)setVal$roleIntent:(NSString *)val$roleIntent {
  JreOperatorRetainedAssign(&val$roleIntent_, val$roleIntent);
}
@synthesize val$roleIntent = val$roleIntent_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  return val$success_;
}
- (void)setVal$success:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  return val$failure_;
}
- (void)setVal$failure:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  JreOperatorRetainedAssign(&val$failure_, val$failure);
}
@synthesize val$failure = val$failure_;

- (void)run {
  @try {
    [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:@"ui_postLogin3: performLoginIfNotLogggedIn. "];
    ComAdironBusmeApiBuspassAPI_Login *result = [this$0_ performLoginIfNotLogggedInWithNSString:val$roleIntent_ withComAdironBusmePlatformLoginManager_LoginContinuation:nil withComAdironBusmePlatformLoginManager_LoginContinuation:nil];
    [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postLogin3: performLoginIfNotLogggedIn %@" , result != nil ? ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status : @"null", nil]];
    if (result == nil || ![@"OK" isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status]) {
      [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postLogin3: launch2(%@,%@)" , val$success_, val$failure_, nil]];
      [this$0_ launchLogin2WithNSString:val$roleIntent_ withComAdironBusmePlatformLoginManager_LoginContinuation:val$success_ withComAdironBusmePlatformLoginManager_LoginContinuation:val$failure_];
    }
    else {
      if (val$success_ != nil && [this$0_ getUIHandler] != nil) {
        [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postLogin3: calling sucess handler(%@)" , val$success_, nil]];
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$success_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[this$0_ getUIHandler] postWithJavaLangRunnable:val$success_];
      }
      else {
        [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postLogin3: no sucess handler" , nil]];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    if (val$failure_ != nil && [this$0_ getUIHandler] != nil) {
      [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$failure_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:[[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:@"NetworkProblem" withNSString:[((JavaIoIOException *) NIL_CHK(e)) getMessage]] autorelease]];
      [[this$0_ getUIHandler] postWithJavaLangRunnable:val$failure_];
    }
    [((JavaIoIOException *) NIL_CHK(e)) printStackTrace];
  }
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)capture$0
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$1
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$roleIntent_, capture$0);
    JreOperatorRetainedAssign(&val$success_, capture$1);
    JreOperatorRetainedAssign(&val$failure_, capture$2);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$failure_, nil);
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&val$roleIntent_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$1 *typedCopy = (ComAdironBusmePlatformLoginManager_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$roleIntent = val$roleIntent_;
  typedCopy.val$success = val$success_;
  typedCopy.val$failure = val$failure_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$2

- (ComAdironBusmePlatformLoginManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformLoginManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$roleIntent {
  return val$roleIntent_;
}
- (void)setVal$roleIntent:(NSString *)val$roleIntent {
  JreOperatorRetainedAssign(&val$roleIntent_, val$roleIntent);
}
@synthesize val$roleIntent = val$roleIntent_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  return val$success_;
}
- (void)setVal$success:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  return val$failure_;
}
- (void)setVal$failure:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  JreOperatorRetainedAssign(&val$failure_, val$failure);
}
@synthesize val$failure = val$failure_;

- (void)run {
  ComAdironBusmePlatformArguments *data = [[[ComAdironBusmePlatformArguments alloc] init] autorelease];
  [((ComAdironBusmePlatformArguments *) NIL_CHK(data)) putStringWithNSString:@"roleIntent" withNSString:val$roleIntent_];
  [[this$0_ getActivityAPI] UIDismissProgressDialog];
  [[this$0_ getActivityAPI] UILaunchLoginDialogWithComAdironBusmePlatformArguments:data withComAdironBusmePlatformLoginManager_LoginContinuation:val$success_ withComAdironBusmePlatformLoginManager_LoginContinuation:val$failure_];
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)capture$0
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$1
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$roleIntent_, capture$0);
    JreOperatorRetainedAssign(&val$success_, capture$1);
    JreOperatorRetainedAssign(&val$failure_, capture$2);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$failure_, nil);
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&val$roleIntent_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$2 *typedCopy = (ComAdironBusmePlatformLoginManager_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$roleIntent = val$roleIntent_;
  typedCopy.val$success = val$success_;
  typedCopy.val$failure = val$failure_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$3

- (ComAdironBusmePlatformLoginManager *)this$1 {
  return this$1_;
}
- (void)setThis$1:(ComAdironBusmePlatformLoginManager *)this$1 {
  JreOperatorRetainedAssign(&this$1_, this$1);
}
@synthesize this$1 = this$1_;
- (id<JavaUtilList>)val$routes {
  return val$routes_;
}
- (void)setVal$routes:(id<JavaUtilList>)val$routes {
  JreOperatorRetainedAssign(&val$routes_, val$routes);
}
@synthesize val$routes = val$routes_;

- (void)run {
  [[this$1_ getActivityAPI] UIShowWhichBusDialogWithNSString:[self getLogin].roleIntent withJavaUtilList:val$routes_];
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                withJavaUtilList:(id<JavaUtilList>)capture$0 {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
    JreOperatorRetainedAssign(&val$routes_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$routes_, nil);
  JreOperatorRetainedAssign(&this$1_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$3 *typedCopy = (ComAdironBusmePlatformLoginManager_$3 *) copy;
  typedCopy.this$1 = this$1_;
  typedCopy.val$routes = val$routes_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$4

- (ComAdironBusmePlatformLoginManager *)this$1 {
  return this$1_;
}
- (void)setThis$1:(ComAdironBusmePlatformLoginManager *)this$1 {
  JreOperatorRetainedAssign(&this$1_, this$1);
}
@synthesize this$1 = this$1_;

- (void)run {
  if ([@"NetworkProblem" isEqual:[self getLogin].status]) {
    [[this$1_ getActivityAPI] UIShowLongToastWithInt:ComAdironBusmeR_string_network_problem];
  }
  else {
    [[this$1_ getActivityAPI] UIShowLongToastWithInt:ComAdironBusmeR_string_login_failure_msg];
  }
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  if ((self = [super initWithComAdironBusmePlatformLoginManager:outer$])) {
    JreOperatorRetainedAssign(&this$1_, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$1_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$4 *typedCopy = (ComAdironBusmePlatformLoginManager_$4 *) copy;
  typedCopy.this$1 = this$1_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$5

- (ComAdironBusmePlatformLoginManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformLoginManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$roleIntent {
  return val$roleIntent_;
}
- (void)setVal$roleIntent:(NSString *)val$roleIntent {
  JreOperatorRetainedAssign(&val$roleIntent_, val$roleIntent);
}
@synthesize val$roleIntent = val$roleIntent_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  return val$success_;
}
- (void)setVal$success:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  return val$failure_;
}
- (void)setVal$failure:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  JreOperatorRetainedAssign(&val$failure_, val$failure);
}
@synthesize val$failure = val$failure_;

- (void)run {
  @try {
    [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:@"ui_postQuietLogin: Background Login. "];
    if ([[this$0_ getActivityAPI] isReady]) {
      ComAdironBusmeApiBuspassAPI_Login *result = [this$0_ performLoginIfNotLogggedInWithNSString:val$roleIntent_ withComAdironBusmePlatformLoginManager_LoginContinuation:val$success_ withComAdironBusmePlatformLoginManager_LoginContinuation:val$failure_];
      [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postQuietLogin: result = %@", result]];
    }
    else {
      [ComAdironBusmePlatformLog vWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:@"ui_postQuietLogin: not ready, delaying. "];
      if ([this$0_ getBackgroundHandler] != nil) {
        [[this$0_ getBackgroundHandler] postDelayedWithJavaLangRunnable:self withLongInt:1000];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) NIL_CHK(e)) printStackTrace];
  }
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)capture$0
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$1
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$roleIntent_, capture$0);
    JreOperatorRetainedAssign(&val$success_, capture$1);
    JreOperatorRetainedAssign(&val$failure_, capture$2);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$failure_, nil);
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&val$roleIntent_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$5 *typedCopy = (ComAdironBusmePlatformLoginManager_$5 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$roleIntent = val$roleIntent_;
  typedCopy.val$success = val$success_;
  typedCopy.val$failure = val$failure_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$6

- (ComAdironBusmePlatformLoginManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformLoginManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$url {
  return val$url_;
}
- (void)setVal$url:(NSString *)val$url {
  JreOperatorRetainedAssign(&val$url_, val$url);
}
@synthesize val$url = val$url_;
- (NSString *)val$roleIntent {
  return val$roleIntent_;
}
- (void)setVal$roleIntent:(NSString *)val$roleIntent {
  JreOperatorRetainedAssign(&val$roleIntent_, val$roleIntent);
}
@synthesize val$roleIntent = val$roleIntent_;
- (NSString *)val$email {
  return val$email_;
}
- (void)setVal$email:(NSString *)val$email {
  JreOperatorRetainedAssign(&val$email_, val$email);
}
@synthesize val$email = val$email_;
- (NSString *)val$password {
  return val$password_;
}
- (void)setVal$password:(NSString *)val$password {
  JreOperatorRetainedAssign(&val$password_, val$password);
}
@synthesize val$password = val$password_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  return val$success_;
}
- (void)setVal$success:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  return val$failure_;
}
- (void)setVal$failure:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  JreOperatorRetainedAssign(&val$failure_, val$failure);
}
@synthesize val$failure = val$failure_;

- (void)run {
  @try {
    ComAdironBusmeApiBuspassAPI_Login *result = [[this$0_ getActivityAPI] passwordLoginWithNSString:val$url_ withNSString:val$roleIntent_ withNSString:val$email_ withNSString:val$password_];
    [this$0_ dWithNSString:@"ui_postPasswordLogin():  %s, %s %s" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:3, result, val$success_, val$failure_ ]];
    if ([@"OK" isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status]) {
      [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postPasswordLogin():OK result = %@", result]];
      if (val$success_ != nil && [this$0_ getUIHandler] != nil) {
        [this$0_ dWithNSString:@"ui_postPasswordLogin(): calling sucess handler %s" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, val$success_ ]];
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$success_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[this$0_ getUIHandler] postWithJavaLangRunnable:val$success_];
      }
      return;
    }
    else {
      [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postPasswordLogin():%@ result = %@" , ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status, result, nil]];
      if (val$failure_ != nil && [this$0_ getUIHandler] != nil) {
        [this$0_ dWithNSString:@"ui_postPasswordLogin(): calling failure %s handler %s" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:2, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status, val$failure_ ]];
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$failure_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[this$0_ getUIHandler] postWithJavaLangRunnable:val$failure_];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postPasswordLogin(): failure exception  = %@" , e, nil] withJavaLangThrowable:e];
    if (val$failure_ != nil && [this$0_ getUIHandler] != nil) {
      ComAdironBusmeApiBuspassAPI_Login *result = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:@"NetworkProblem" withNSString:[((JavaIoIOException *) NIL_CHK(e)) getMessage]] autorelease];
      [this$0_ dWithNSString:@"ui_postPasswordLogin(): calling failure %s handler %s %s" withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:3, ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status, [((JavaIoIOException *) NIL_CHK(e)) getMessage], val$failure_ ]];
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).email = val$email_;
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).roleIntent = val$roleIntent_;
      [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$failure_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
      [[this$0_ getUIHandler] postWithJavaLangRunnable:val$failure_];
    }
  }
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)capture$0
                                    withNSString:(NSString *)capture$1
                                    withNSString:(NSString *)capture$2
                                    withNSString:(NSString *)capture$3
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$4
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$5 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$url_, capture$0);
    JreOperatorRetainedAssign(&val$roleIntent_, capture$1);
    JreOperatorRetainedAssign(&val$email_, capture$2);
    JreOperatorRetainedAssign(&val$password_, capture$3);
    JreOperatorRetainedAssign(&val$success_, capture$4);
    JreOperatorRetainedAssign(&val$failure_, capture$5);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$failure_, nil);
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&val$password_, nil);
  JreOperatorRetainedAssign(&val$email_, nil);
  JreOperatorRetainedAssign(&val$roleIntent_, nil);
  JreOperatorRetainedAssign(&val$url_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$6 *typedCopy = (ComAdironBusmePlatformLoginManager_$6 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$url = val$url_;
  typedCopy.val$roleIntent = val$roleIntent_;
  typedCopy.val$email = val$email_;
  typedCopy.val$password = val$password_;
  typedCopy.val$success = val$success_;
  typedCopy.val$failure = val$failure_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$7

- (ComAdironBusmePlatformLoginManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformLoginManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$url {
  return val$url_;
}
- (void)setVal$url:(NSString *)val$url {
  JreOperatorRetainedAssign(&val$url_, val$url);
}
@synthesize val$url = val$url_;
- (NSString *)val$roleIntent {
  return val$roleIntent_;
}
- (void)setVal$roleIntent:(NSString *)val$roleIntent {
  JreOperatorRetainedAssign(&val$roleIntent_, val$roleIntent);
}
@synthesize val$roleIntent = val$roleIntent_;
- (NSString *)val$email {
  return val$email_;
}
- (void)setVal$email:(NSString *)val$email {
  JreOperatorRetainedAssign(&val$email_, val$email);
}
@synthesize val$email = val$email_;
- (NSString *)val$password {
  return val$password_;
}
- (void)setVal$password:(NSString *)val$password {
  JreOperatorRetainedAssign(&val$password_, val$password);
}
@synthesize val$password = val$password_;
- (NSString *)val$driverAuthCode {
  return val$driverAuthCode_;
}
- (void)setVal$driverAuthCode:(NSString *)val$driverAuthCode {
  JreOperatorRetainedAssign(&val$driverAuthCode_, val$driverAuthCode);
}
@synthesize val$driverAuthCode = val$driverAuthCode_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  return val$success_;
}
- (void)setVal$success:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;
- (ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  return val$failure_;
}
- (void)setVal$failure:(ComAdironBusmePlatformLoginManager_LoginContinuation *)val$failure {
  JreOperatorRetainedAssign(&val$failure_, val$failure);
}
@synthesize val$failure = val$failure_;

- (void)run {
  @try {
    ComAdironBusmeApiBuspassAPI_Login *result = [[this$0_ getActivityAPI] passwordRegistrationWithNSString:val$url_ withNSString:val$roleIntent_ withNSString:val$email_ withNSString:val$password_ withNSString:val$driverAuthCode_];
    if ([@"OK" isEqual:((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status]) {
      [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postRegistration():OK result = %@", result]];
      if (val$success_ != nil && [this$0_ getUIHandler] != nil) {
        [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postRegistration(): calling success handler %@" , val$failure_, nil]];
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$success_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[this$0_ getUIHandler] postWithJavaLangRunnable:val$success_];
      }
      return;
    }
    else {
      [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postRegistration():%@" , ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).status, nil]];
      if (val$failure_ != nil && [this$0_ getUIHandler] != nil) {
        [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformLoginManager LOGTAG] withNSString:[NSString stringWithFormat:@"ui_postRegistration(): calling failure handler %@" , val$failure_, nil]];
        [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$failure_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
        [[this$0_ getUIHandler] postWithJavaLangRunnable:val$failure_];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    if (val$failure_ != nil && [this$0_ getUIHandler] != nil) {
      ComAdironBusmeApiBuspassAPI_Login *result = [[[ComAdironBusmeApiBuspassAPI_Login alloc] initWithNSString:@"NetworkProblem" withNSString:[((JavaIoIOException *) NIL_CHK(e)) getMessage]] autorelease];
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).email = val$email_;
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).roleIntent = val$roleIntent_;
      ((ComAdironBusmeApiBuspassAPI_Login *) NIL_CHK(result)).driverAuthCode = val$driverAuthCode_;
      [((ComAdironBusmePlatformLoginManager_LoginContinuation *) NIL_CHK(val$failure_)) setLoginWithComAdironBusmeApiBuspassAPI_Login:result];
      [[this$0_ getUIHandler] postWithJavaLangRunnable:val$failure_];
    }
  }
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$
                                    withNSString:(NSString *)capture$0
                                    withNSString:(NSString *)capture$1
                                    withNSString:(NSString *)capture$2
                                    withNSString:(NSString *)capture$3
                                    withNSString:(NSString *)capture$4
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$5
withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)capture$6 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$url_, capture$0);
    JreOperatorRetainedAssign(&val$roleIntent_, capture$1);
    JreOperatorRetainedAssign(&val$email_, capture$2);
    JreOperatorRetainedAssign(&val$password_, capture$3);
    JreOperatorRetainedAssign(&val$driverAuthCode_, capture$4);
    JreOperatorRetainedAssign(&val$success_, capture$5);
    JreOperatorRetainedAssign(&val$failure_, capture$6);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$failure_, nil);
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&val$driverAuthCode_, nil);
  JreOperatorRetainedAssign(&val$password_, nil);
  JreOperatorRetainedAssign(&val$email_, nil);
  JreOperatorRetainedAssign(&val$roleIntent_, nil);
  JreOperatorRetainedAssign(&val$url_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$7 *typedCopy = (ComAdironBusmePlatformLoginManager_$7 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$url = val$url_;
  typedCopy.val$roleIntent = val$roleIntent_;
  typedCopy.val$email = val$email_;
  typedCopy.val$password = val$password_;
  typedCopy.val$driverAuthCode = val$driverAuthCode_;
  typedCopy.val$success = val$success_;
  typedCopy.val$failure = val$failure_;
}

@end
@implementation ComAdironBusmePlatformLoginManager_$8

- (ComAdironBusmePlatformLoginManager *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformLoginManager *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;

- (void)run {
  [this$0_ dWithNSString:@"postLogout()  -- Should call server and reset session or closeout." withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:0 ]];
}

- (id)initWithComAdironBusmePlatformLoginManager:(ComAdironBusmePlatformLoginManager *)outer$ {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformLoginManager_$8 *typedCopy = (ComAdironBusmePlatformLoginManager_$8 *) copy;
  typedCopy.this$0 = this$0_;
}

@end
