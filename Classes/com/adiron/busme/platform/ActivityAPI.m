//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: build/src/main/java/com/adiron/busme/platform/ActivityAPI.java
//
//  Created by polar on 5/25/13.
//

#import "IOSClass.h"
#import "IOSObjectArray.h"
#import "com/adiron/busme/R.h"
#import "com/adiron/busme/api/APIBase.h"
#import "com/adiron/busme/api/BannerInfo.h"
#import "com/adiron/busme/api/Buspass.h"
#import "com/adiron/busme/api/BuspassAPI.h"
#import "com/adiron/busme/api/DiscoverAPIVersion1.h"
#import "com/adiron/busme/api/JourneyLocation.h"
#import "com/adiron/busme/api/JourneyPattern.h"
#import "com/adiron/busme/api/MarkerInfo.h"
#import "com/adiron/busme/api/Master.h"
#import "com/adiron/busme/api/MasterMessage.h"
#import "com/adiron/busme/api/NameId.h"
#import "com/adiron/busme/api/Route.h"
#import "com/adiron/busme/integration/BoundingBoxE6.h"
#import "com/adiron/busme/integration/GeoPoint.h"
#import "com/adiron/busme/integration/http/HttpEntity.h"
#import "com/adiron/busme/integration/http/NameValuePair.h"
#import "com/adiron/busme/integration/http/message/BasicNameValuePair.h"
#import "com/adiron/busme/platform/ActivityAPI.h"
#import "com/adiron/busme/platform/Arguments.h"
#import "com/adiron/busme/platform/BannerStore.h"
#import "com/adiron/busme/platform/BusmeActivityController.h"
#import "com/adiron/busme/platform/BusmeConfigurator.h"
#import "com/adiron/busme/platform/BuspassEvent.h"
#import "com/adiron/busme/platform/BuspassEventListener.h"
#import "com/adiron/busme/platform/GeoCalc.h"
#import "com/adiron/busme/platform/GeoPathUtils.h"
#import "com/adiron/busme/platform/Handler.h"
#import "com/adiron/busme/platform/JourneyDisplay.h"
#import "com/adiron/busme/platform/JourneyLocationPoster.h"
#import "com/adiron/busme/platform/JourneyStore.h"
#import "com/adiron/busme/platform/Location.h"
#import "com/adiron/busme/platform/LocationListener.h"
#import "com/adiron/busme/platform/Log.h"
#import "com/adiron/busme/platform/LoginManager.h"
#import "com/adiron/busme/platform/MasterMessageBasket.h"
#import "com/adiron/busme/platform/MessageStore.h"
#import "com/adiron/busme/platform/ProgressLogger.h"
#import "java/io/BufferedReader.h"
#import "java/io/IOException.h"
#import "java/io/InputStream.h"
#import "java/io/InputStreamReader.h"
#import "java/lang/Boolean.h"
#import "java/lang/Double.h"
#import "java/lang/Exception.h"
#import "java/lang/Integer.h"
#import "java/lang/Long.h"
#import "java/lang/Runnable.h"
#import "java/lang/StringBuffer.h"
#import "java/util/ArrayList.h"
#import "java/util/Collection.h"
#import "java/util/Date.h"
#import "java/util/HashMap.h"
#import "java/util/Iterator.h"
#import "java/util/List.h"
#import "java/util/Map.h"
#import "java/util/Observable.h"
#import "java/util/TreeSet.h"
#import "org/osmdroid/api/IGeoPoint.h"

@implementation ComAdironBusmePlatformActivityAPI

static NSString * ComAdironBusmePlatformActivityAPI_LOGTAG_ = @"platform.ActivityAPI";

- (ComAdironBusmePlatformBusmeConfigurator *)configurator {
  return configurator_;
}
- (void)setConfigurator:(ComAdironBusmePlatformBusmeConfigurator *)configurator {
  JreOperatorRetainedAssign(&configurator_, configurator);
}
@synthesize configurator = configurator_;
- (NSString *)masterName {
  return masterName_;
}
- (void)setMasterName:(NSString *)masterName {
  JreOperatorRetainedAssign(&masterName_, masterName);
}
@synthesize masterName = masterName_;
- (NSString *)masterSlug {
  return masterSlug_;
}
- (void)setMasterSlug:(NSString *)masterSlug {
  JreOperatorRetainedAssign(&masterSlug_, masterSlug);
}
@synthesize masterSlug = masterSlug_;
- (id<JavaUtilMap>)eventListeners {
  return eventListeners_;
}
- (void)setEventListeners:(id<JavaUtilMap>)eventListeners {
  JreOperatorRetainedAssign(&eventListeners_, eventListeners);
}
@synthesize eventListeners = eventListeners_;
- (ComAdironBusmePlatformJourneyLocationPoster *)journeyLocationPoster {
  return journeyLocationPoster_;
}
- (void)setJourneyLocationPoster:(ComAdironBusmePlatformJourneyLocationPoster *)journeyLocationPoster {
  JreOperatorRetainedAssign(&journeyLocationPoster_, journeyLocationPoster);
}
@synthesize journeyLocationPoster = journeyLocationPoster_;

+ (NSString *)LOGTAG {
  return ComAdironBusmePlatformActivityAPI_LOGTAG_;
}

- (id)initWithNSString:(NSString *)initialUrl
          withNSString:(NSString *)platform
          withNSString:(NSString *)appVersion {
  if ((self = [super initWithNSString:initialUrl withNSString:platform withNSString:appVersion])) {
    JreOperatorRetainedAssign(&eventListeners_, [[[JavaUtilHashMap alloc] init] autorelease]);
  }
  return self;
}

- (ComAdironBusmePlatformBusmeConfigurator *)getConfigurator {
  return configurator_;
}

- (void)setConfiguratorWithComAdironBusmePlatformBusmeConfigurator:(ComAdironBusmePlatformBusmeConfigurator *)configurator {
  self.configurator = configurator;
}

- (void)setMasterWithComAdironBusmeApiMaster:(ComAdironBusmeApiMaster *)master {
  [self setMasterNameWithNSString:((ComAdironBusmeApiMaster *) NIL_CHK(master)).name];
  [self setMasterSlugWithNSString:((ComAdironBusmeApiMaster *) NIL_CHK(master)).slug];
  [self setApiUrlWithNSString:((ComAdironBusmeApiMaster *) NIL_CHK(master)).apiUrl];
}

- (NSString *)getMasterName {
  return masterName_;
}

- (void)setMasterNameWithNSString:(NSString *)masterName {
  self.masterName = masterName;
}

- (NSString *)getMasterSlug {
  return masterSlug_;
}

- (void)setMasterSlugWithNSString:(NSString *)masterSlug {
  self.masterSlug = masterSlug;
}

- (ComAdironBusmeApiBuspass *)get {
  ComAdironBusmeApiBuspass *bp = [super get];
  if (bp != nil) {
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [[self getInitialMessages] iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        ComAdironBusmeApiMasterMessage *msg = ((ComAdironBusmeApiMasterMessage *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [[[self getBusmeActivityController] getMessageBasket] addMessageWithComAdironBusmeApiMasterMessage:msg];
      }
    }
    [[[self getBusmeActivityController] getMessageBasket] force];
  }
  return bp;
}

- (BOOL)isLoggedIn {
  return [[self getLoginManager] isLoggedIn];
}

- (ComAdironBusmeApiBuspassAPI_Login *)getLogin {
  return [[self getLoginManager] getLogin];
}

- (void)onLocatorSelectedWithJavaUtilList:(id<JavaUtilList>)routes {
  id<JavaUtilList> rs = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) NIL_CHK(routes)) size]] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(routes)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComAdironBusmePlatformJourneyDisplay *jd = ((ComAdironBusmePlatformJourneyDisplay *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      [((id<JavaUtilList>) NIL_CHK(rs)) addWithId:[((ComAdironBusmePlatformJourneyDisplay *) NIL_CHK(jd)) getRoute]];
    }
  }
  [[self getLoginManager] onLocatorSelectedWithJavaUtilList:rs];
}

- (NSString *)getTrackingArgs {
  ComAdironBusmePlatformLocation *location = [self getLastFix];
  if (location != nil) {
    NSString *args = [NSString stringWithFormat:@"lat=%f", [location getLatitude]];
    args = [NSString stringWithFormat:@"%@%@", args, [NSString stringWithFormat:@"&lon=%f", [location getLongitude]]];
    args = [NSString stringWithFormat:@"%@%@", args, [NSString stringWithFormat:@"&t=%qi", [location getTime]]];
    return args;
  }
  else {
    return @"";
  }
}

- (id<JavaUtilList>)getNameIdsWithNSString:(NSString *)url {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getNameIds: url %@", url]];
  if ([self isReady]) {
    ComAdironBusmeIntegrationHttpHttpEntity *entity = nil;
    @try {
      id<JavaUtilList> nameids = [[[JavaUtilArrayList alloc] init] autorelease];
      entity = [super openURLWithNSString:url];
      JavaIoInputStream *in = [((ComAdironBusmeIntegrationHttpHttpEntity *) NIL_CHK(entity)) getContent];
      if (in != nil) {
        JavaIoBufferedReader *br = [[[JavaIoBufferedReader alloc] initWithJavaIoReader:[[[JavaIoInputStreamReader alloc] initWithJavaIoInputStream:in] autorelease]] autorelease];
        NSString *nameid = [((JavaIoBufferedReader *) NIL_CHK(br)) readLine];
        while (nameid != nil) {
          [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:nameid];
          [((id<JavaUtilList>) NIL_CHK(nameids)) addWithId:[[[ComAdironBusmeApiNameId alloc] initWithNSStringArray:[NIL_CHK(nameid) split:@","]] autorelease]];
          nameid = [((JavaIoBufferedReader *) NIL_CHK(br)) readLine];
        }
        return nameids;
      }
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Could not get URL Stream for %@", url]];
      return [[[JavaUtilArrayList alloc] init] autorelease];
    }
    @catch (JavaLangException *e) {
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Could not get name ids: %@", e]];
      @throw [[[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Could not get Nameids: %@", [((JavaLangException *) NIL_CHK(e)) getMessage]]] autorelease];
    }
    @finally {
      if (entity != nil) {
        [entity consumeContent];
      }
    }
  }
  return [[[JavaUtilArrayList alloc] init] autorelease];
}

- (id<JavaUtilList>)getRouteJourneyIds {
  NSString *url = [self getRouteJourneyIdsUrl];
  if ([self isReady] && url != nil) {
    NSString *args = [self getTrackingArgs];
    url = args == nil ? [NSString stringWithFormat:@"%@?platform=Android", url] : [NSString stringWithFormat:@"%@?platform=Android&%@", url, args];
    return [self getNameIdsWithNSString:url];
  }
  else {
    return [[[JavaUtilArrayList alloc] init] autorelease];
  }
}

- (NSString *)joinWithNSStringArray:(IOSObjectArray *)ss
                       withNSString:(NSString *)delimeter {
  JavaLangStringBuffer *sb = [[[JavaLangStringBuffer alloc] init] autorelease];
  for (int i = 0; i < (int) [((IOSObjectArray *) NIL_CHK(ss)) count]; i++) {
    [((JavaLangStringBuffer *) NIL_CHK(sb)) appendWithNSString:((NSString *) [((IOSObjectArray *) NIL_CHK(ss)) objectAtIndex:i])];
    if (i < (int) [((IOSObjectArray *) NIL_CHK(ss)) count] - 1) {
      [((JavaLangStringBuffer *) NIL_CHK(sb)) appendWithNSString:delimeter];
    }
  }
  return [((JavaLangStringBuffer *) NIL_CHK(sb)) description];
}

- (void)postJourneyLocationWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r
                   withComAdironBusmePlatformLocation:(ComAdironBusmePlatformLocation *)location
                                         withNSString:(NSString *)role {
  NSString *url = [super getPostJourneyLocationUrl];
  if ([self isReady] && url != nil) {
    id<JavaUtilList> params = [[[JavaUtilArrayList alloc] init] autorelease];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"id" withNSString:[NSString stringWithFormat:@"%@", [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getId]]] autorelease]];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lat" withNSString:[NSString stringWithFormat:@"%f", [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getLatitude]]] autorelease]];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lon" withNSString:[NSString stringWithFormat:@"%f", [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getLongitude]]] autorelease]];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"dir" withNSString:[NSString stringWithFormat:@"%f", [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getBearing]]] autorelease]];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"reported_time" withNSString:[NSString stringWithFormat:@"%qi", [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getTime]]] autorelease]];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"speed" withNSString:[NSString stringWithFormat:@"%f", [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getSpeed]]] autorelease]];
    if ([@"driver" isEqual:role]) {
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"driver" withNSString:@"1"] autorelease]];
    }
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self postURLWithNSString:url withJavaUtilList:params];
    if (ent != nil) {
      ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
      if ([@"OK" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Posted Location: OK on %@" , [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName], nil]];
      }
      else if ([@"NotAvailable" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Posted Location: Not Available, we should probably stop posting on %@" , [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName], nil]];
      }
      else if ([@"NotLoggedIn" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Posted Location: Not Logged In. We got bumped? on %@" , [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName], nil]];
        [self triggerEventWithNSString:@"ServerLogout"];
      }
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"POSTLOC %@ Response : %@", url, tag]];
    }
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Posted Location %@: %f, %f", [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName], [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getLongitude], [((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getLatitude]]];
  }
}

- (void)postFeedbackWithNSString:(NSString *)message {
  NSString *url = [super getPostFeedbackUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@", url, [self getPlatformArgs]];
    NSString *args = [self getTrackingArgs];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@", url, args];
    id<JavaUtilList> params = [[[JavaUtilArrayList alloc] init] autorelease];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"subject" withNSString:[NSString stringWithFormat:@"Sent from Busme %@ %@" , [self getPlatformName], [self getBusmeAppVersionString], nil]] autorelease]];
    [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"message" withNSString:[NSString stringWithFormat:@"%@", message]] autorelease]];
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self postURLWithNSString:url withJavaUtilList:params];
    if (ent != nil) {
      ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"POSTLOC %@ Response : %@", url, tag]];
    }
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:@"Posted Feedback "];
  }
}

- (ComAdironBusmeApiRoute *)getRouteDefinitionWithComAdironBusmeApiNameId:(ComAdironBusmeApiNameId *)name {
  ComAdironBusmeApiRoute *route = [[[ComAdironBusmeApiRoute alloc] initWithComAdironBusmePlatformActivityAPI:self] autorelease];
  NSString *url = [self getRouteDefinitionUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@&id=%@" , url, [self getPlatformArgs], ((ComAdironBusmeApiNameId *) NIL_CHK(name)).id_, nil];
    NSString *args = [self getTrackingArgs];
    if (((ComAdironBusmeApiNameId *) NIL_CHK(name)).type != nil) {
      url = [NSString stringWithFormat:@"%@%@", url, [NSString stringWithFormat:@"&type=%@", ((ComAdironBusmeApiNameId *) NIL_CHK(name)).type]];
    }
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@", url, args];
    @try {
      ComAdironBusmeIntegrationHttpHttpEntity *entity = [self openURLWithNSString:url];
      ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:entity];
      [((ComAdironBusmeApiRoute *) NIL_CHK(route)) loadParsedXMLWithComAdironBusmeApiAPIBase_Tag:tag];
    }
    @catch (JavaLangException *e) {
      @throw [[[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot load route: %@", [((JavaLangException *) NIL_CHK(e)) getMessage]]] autorelease];
    }
  }
  return route;
}

- (ComAdironBusmeApiJourneyPattern *)getJourneyPatternWithNSString:(NSString *)id_ {
  ComAdironBusmeApiJourneyPattern *journeyPattern = [[[ComAdironBusmeApiJourneyPattern alloc] init] autorelease];
  NSString *url = [super getRouteDefinitionUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@&id=%@" , url, [self getPlatformArgs], id_, nil];
    NSString *args = [self getTrackingArgs];
    url = [NSString stringWithFormat:@"%@&type=P", url];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@", url, args];
    @try {
      if ([self isReady]) {
        ComAdironBusmeIntegrationHttpHttpEntity *entity = [self openURLWithNSString:url];
        ComAdironBusmeApiAPIBase_Tag *tag = [super xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:entity];
        [((ComAdironBusmeApiJourneyPattern *) NIL_CHK(journeyPattern)) loadParsedXMLWithComAdironBusmeApiAPIBase_Tag:tag];
      }
      else {
        return nil;
      }
    }
    @catch (JavaLangException *e) {
      @throw [[[JavaIoIOException alloc] initWithNSString:[NSString stringWithFormat:@"Cannot load route: %@", [((JavaLangException *) NIL_CHK(e)) getMessage]]] autorelease];
    }
  }
  return journeyPattern;
}

- (id<JavaUtilMap>)getMarkersXMLWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilMap> markers = nil;
  if ([self isReady] && [self getMarkersUrl] != nil) {
    id<JavaUtilList> params = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilCollection>) NIL_CHK(collection)) size]] autorelease];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        ComAdironBusmeApiMarkerInfo *j = ((ComAdironBusmeApiMarkerInfo *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"ids[]" withNSString:((ComAdironBusmeApiMarkerInfo *) NIL_CHK(j)).id_] autorelease]];
        [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"versions[]" withNSString:[NSString stringWithFormat:@"%d", ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(j)).version_]] autorelease]];
      }
    }
    ComAdironBusmePlatformLocation *location = [self getLastFix];
    if (location != nil) {
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lat" withNSString:[NSString stringWithFormat:@"%f", ([location getLatitude])]] autorelease]];
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lon" withNSString:[NSString stringWithFormat:@"%f", ([location getLongitude])]] autorelease]];
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"t" withNSString:[NSString stringWithFormat:@"%qi", [location getTime]]] autorelease]];
    }
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMarkersXML: There are %d marker we have stored", [((id<JavaUtilCollection>) NIL_CHK(collection)) size]]];
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self postURLWithNSString:[self getMarkersUrl] withJavaUtilList:params];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    if (tag != nil && ((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).childNodes != nil && [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size] > 0) {
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMarkersXML: GOT %d Elements", [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]]];
      markers = [[[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]] autorelease];
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMarkersXML: GOT markers %@", tag]];
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMarkersXML: GOT %d Markers", [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]]];
      {
        id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) iterator]);
        while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
          ComAdironBusmeApiAPIBase_Tag *n = ((ComAdironBusmeApiAPIBase_Tag *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
          if ([NIL_CHK(n.name) isEqual:@"Marker"]) {
            NSString *id_ = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"id"]);
            if (((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"destroy"]) != nil) {
              [((id<JavaUtilMap>) NIL_CHK(markers)) putWithId:id_ withId:nil];
            }
            else {
              @try {
                ComAdironBusmeApiMarkerInfo *marker = [[[ComAdironBusmeApiMarkerInfo alloc] init] autorelease];
                ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).id_ = id_;
                int lat = (int) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"lat"])] * 1E6);
                int lon = (int) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"lon"])] * 1E6);
                ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).radius = [JavaLangLong parseLongWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"radius"])];
                ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).goUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"go_url"]);
                ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).iconUrl = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"icon_url"]);
                ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).version_ = [JavaLangInteger parseIntWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"version"])];
                ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).point = [[[ComAdironBusmeIntegrationGeoPoint alloc] initWithInt:lat withInt:lon] autorelease];
                {
                  id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(n.childNodes)) iterator]);
                  while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
                    ComAdironBusmeApiAPIBase_Tag *m = ((ComAdironBusmeApiAPIBase_Tag *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
                    if ([@"Title" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(m)).name]) {
                      ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).title = ((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(m)).text;
                    }
                    else if ([@"Description" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(m)).name]) {
                      ((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).description_ = ((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(m)).text;
                    }
                  }
                }
                [((id<JavaUtilMap>) NIL_CHK(markers)) putWithId:((ComAdironBusmeApiMarkerInfo *) NIL_CHK(marker)).id_ withId:marker];
              }
              @catch (JavaLangException *e) {
              }
            }
          }
        }
      }
    }
  }
  return markers;
}

- (id<JavaUtilMap>)getMessagesXMLWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilMap> messages = nil;
  if ([self isReady] && [self getMessagesUrl] != nil) {
    id<JavaUtilList> params = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilCollection>) NIL_CHK(collection)) size]] autorelease];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilCollection>) NIL_CHK(collection)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        ComAdironBusmeApiMasterMessage *j = ((ComAdironBusmeApiMasterMessage *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"ids[]" withNSString:[((ComAdironBusmeApiMasterMessage *) NIL_CHK(j)) getId]] autorelease]];
        [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"versions[]" withNSString:[NSString stringWithFormat:@"%qi", [((ComAdironBusmeApiMasterMessage *) NIL_CHK(j)) getVersion]]] autorelease]];
      }
    }
    ComAdironBusmePlatformLocation *location = [self getLastFix];
    if (location != nil) {
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lat" withNSString:[NSString stringWithFormat:@"%f", ([location getLatitude])]] autorelease]];
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lon" withNSString:[NSString stringWithFormat:@"%f", ([location getLongitude])]] autorelease]];
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"t" withNSString:[NSString stringWithFormat:@"%qi", [location getTime]]] autorelease]];
    }
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMessagesXML: There are %d marker we have stored", [((id<JavaUtilCollection>) NIL_CHK(collection)) size]]];
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self postURLWithNSString:[self getMessagesUrl] withJavaUtilList:params];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    if (tag != nil && ((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).childNodes != nil && [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size] > 0) {
      [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMessagesXML: GOT %d Elements", [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]]];
      messages = [[[JavaUtilHashMap alloc] initWithInt:[((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]] autorelease];
      if ([((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size] > 0) {
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMessagesXML: GOT markers %@", tag]];
        [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMessagesXML: GOT %d Markers", [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]]];
        {
          id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) iterator]);
          while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
            ComAdironBusmeApiAPIBase_Tag *n = ((ComAdironBusmeApiAPIBase_Tag *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
            if ([NIL_CHK(n.name) isEqual:@"Message"]) {
              NSString *id_ = ((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"id"]);
              if (((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"destroy"]) != nil) {
                [((id<JavaUtilMap>) NIL_CHK(messages)) putWithId:id_ withId:nil];
              }
              else {
                ComAdironBusmeApiMasterMessage *msg = [[[ComAdironBusmeApiMasterMessage alloc] init] autorelease];
                [((ComAdironBusmeApiMasterMessage *) NIL_CHK(msg)) loadParsedXMLWithComAdironBusmeApiAPIBase_Tag:n];
                [((id<JavaUtilMap>) NIL_CHK(messages)) putWithId:[((ComAdironBusmeApiMasterMessage *) NIL_CHK(msg)) getId] withId:msg];
              }
            }
          }
        }
      }
    }
  }
  return messages;
}

- (id<JavaUtilMap>)getMultipleJourneyLocationsXMLWithJavaUtilList:(id<JavaUtilList>)journeys {
  id<JavaUtilMap> locs = [[[JavaUtilHashMap alloc] init] autorelease];
  if ([self isReady] && [self getMultipleJourneyLocationsUrl] != nil) {
    id<JavaUtilList> params = [[[JavaUtilArrayList alloc] initWithInt:[((id<JavaUtilList>) NIL_CHK(journeys)) size]] autorelease];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(journeys)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        ComAdironBusmeApiRoute *j = ((ComAdironBusmeApiRoute *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"ids[]" withNSString:((ComAdironBusmeApiRoute *) NIL_CHK(j)).id_] autorelease]];
      }
    }
    ComAdironBusmePlatformLocation *location = [self getLastFix];
    if (location != nil) {
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lat" withNSString:[NSString stringWithFormat:@"%f", ([location getLatitude])]] autorelease]];
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"lon" withNSString:[NSString stringWithFormat:@"%f", ([location getLongitude])]] autorelease]];
      [((id<JavaUtilList>) NIL_CHK(params)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"t" withNSString:[NSString stringWithFormat:@"%qi", [location getTime]]] autorelease]];
    }
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMultipleJourneyLocationsXML: There are %d Journeys to find locations for", [((id<JavaUtilList>) NIL_CHK(journeys)) size]]];
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self postURLWithNSString:[self getMultipleJourneyLocationsUrl] withJavaUtilList:params];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMultipleJourneyLocationsXML: GOT locations %@", tag]];
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"getMultipleJourneyLocationsXML: GOT %d Journeys locations", [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) size]]];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(tag.childNodes)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        ComAdironBusmeApiAPIBase_Tag *n = ((ComAdironBusmeApiAPIBase_Tag *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        if ([NIL_CHK(n.name) isEqual:@"JP"]) {
          ComAdironBusmeApiJourneyLocation *loc = [[[ComAdironBusmeApiJourneyLocation alloc] init] autorelease];
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).lat = (int) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"lat"])] * 1E6);
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).lon = (int) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"lon"])] * 1E6);
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).dir = (float) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"direction"])]);
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).reported = [JavaLangBoolean parseBooleanWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"reported"])];
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).reported_time = 1000 * [JavaLangLong parseLongWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"reported_time"])];
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).recorded_time = 1000 * [JavaLangLong parseLongWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"recorded_time"])];
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).timediff = (int) ([JavaLangInteger parseIntWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"timediff"])]);
          ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).onroute = (BOOL) [JavaLangBoolean parseBooleanWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"onroute"])];
          [((id<JavaUtilMap>) NIL_CHK(locs)) putWithId:((NSString *) [((id<JavaUtilMap>) NIL_CHK(n.attributes)) getWithId:@"id"]) withId:loc];
        }
      }
    }
  }
  return locs;
}

- (ComAdironBusmeApiJourneyLocation *)getJourneyLocationXMLWithComAdironBusmeApiNameId:(ComAdironBusmeApiNameId *)nameid {
  NSString *url = [self getJourneyLocationUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@&id=%@" , url, [self getPlatformArgs], ((ComAdironBusmeApiNameId *) NIL_CHK(nameid)).id_, nil];
    NSString *args = [self getTrackingArgs];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@", url, args];
    ComAdironBusmeIntegrationHttpHttpEntity *entity = [self openURLWithNSString:url];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:entity];
    if ([NIL_CHK(tag.name) isEqual:@"NotInService"]) {
      return nil;
    }
    if ([NIL_CHK(tag.name) isEqual:@"JP"]) {
      ComAdironBusmeApiJourneyLocation *loc = [[[ComAdironBusmeApiJourneyLocation alloc] init] autorelease];
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).lat = (int) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"lat"])] * 1E6);
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).lon = (int) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"lon"])] * 1E6);
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).dir = (float) ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"direction"])]);
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).distance = ([JavaLangDouble parseDoubleWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"distance"])]);
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).reported_time = 1000 * [JavaLangLong parseLongWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"reported_time"])];
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).recorded_time = 1000 * [JavaLangLong parseLongWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"recorded_time"])];
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).timediff = (int) ([JavaLangInteger parseIntWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"timediff"])]);
      ((ComAdironBusmeApiJourneyLocation *) NIL_CHK(loc)).onroute = (BOOL) [JavaLangBoolean parseBooleanWithNSString:((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"onroute"])];
      return loc;
    }
  }
  return nil;
}

- (NSString *)getMarkerClickThruWithNSString:(NSString *)id_ {
  NSString *url = [self getMarkerClickThruUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@" , url, [self getPlatformArgs], nil];
    NSString *args = [self getTrackingArgs];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@" , url, args, nil];
    JavaUtilArrayList *postArgs = [[[JavaUtilArrayList alloc] init] autorelease];
    [((JavaUtilArrayList *) NIL_CHK(postArgs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"marker_id" withNSString:id_] autorelease]];
    [((JavaUtilArrayList *) NIL_CHK(postArgs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"master_slug" withNSString:[self getSlug]] autorelease]];
    ComAdironBusmeIntegrationHttpHttpEntity *entity = [self postURLWithNSString:url withJavaUtilList:postArgs];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:entity];
    if (tag != nil && [@"a" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
      return ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"href"]);
    }
  }
  return nil;
}

- (NSString *)getMessageClickThruWithNSString:(NSString *)id_ {
  NSString *url = [self getMessageClickThruUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@" , url, [self getPlatformArgs], nil];
    NSString *args = [self getTrackingArgs];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@" , url, args, nil];
    JavaUtilArrayList *postArgs = [[[JavaUtilArrayList alloc] init] autorelease];
    [((JavaUtilArrayList *) NIL_CHK(postArgs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"message_id" withNSString:id_] autorelease]];
    [((JavaUtilArrayList *) NIL_CHK(postArgs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"master_slug" withNSString:[self getSlug]] autorelease]];
    ComAdironBusmeIntegrationHttpHttpEntity *entity = [self postURLWithNSString:url withJavaUtilList:postArgs];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:entity];
    if (tag != nil && [@"a" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
      return ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"href"]);
    }
  }
  return nil;
}

- (NSString *)getBannerClickThruWithNSString:(NSString *)id_ {
  NSString *url = [self getBannerClickThruUrl];
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?%@" , url, [self getPlatformArgs], nil];
    NSString *args = [self getTrackingArgs];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@" , url, args, nil];
    JavaUtilArrayList *postArgs = [[[JavaUtilArrayList alloc] init] autorelease];
    [((JavaUtilArrayList *) NIL_CHK(postArgs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"banner_id" withNSString:id_] autorelease]];
    [((JavaUtilArrayList *) NIL_CHK(postArgs)) addWithId:[[[ComAdironBusmeIntegrationHttpMessageBasicNameValuePair alloc] initWithNSString:@"master_slug" withNSString:[self getSlug]] autorelease]];
    ComAdironBusmeIntegrationHttpHttpEntity *entity = [self postURLWithNSString:url withJavaUtilList:postArgs];
    ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:entity];
    if (tag != nil && [@"a" isEqual:((ComAdironBusmeApiAPIBase_Tag *) NIL_CHK(tag)).name]) {
      return ((NSString *) [((id<JavaUtilMap>) NIL_CHK(tag.attributes)) getWithId:@"href"]);
    }
  }
  return nil;
}

- (id<JavaUtilList>)getAllCloseJourneysWithComAdironBusmePlatformLocation:(ComAdironBusmePlatformLocation *)location
                                                                  withInt:(int)feet {
  id<JavaUtilList> journeys = [[self getBusmeActivityController] getAllJourneys];
  JavaUtilArrayList *closeJourneys = [[[JavaUtilArrayList alloc] init] autorelease];
  id<OrgOsmdroidApiIGeoPoint> where = [[[ComAdironBusmeIntegrationGeoPoint alloc] initWithInt:(int) ([((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getLatitude] * 1E6) withInt:(int) ([((ComAdironBusmePlatformLocation *) NIL_CHK(location)) getLongitude] * 1E6)] autorelease];
  {
    id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(journeys)) iterator]);
    while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
      ComAdironBusmeApiRoute *journey = ((ComAdironBusmeApiRoute *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
      if ([((ComAdironBusmeApiRoute *) NIL_CHK(journey)) isJourney] && [((ComAdironBusmeApiRoute *) NIL_CHK(journey)) isNearRouteWithOrgOsmdroidApiIGeoPoint:where withDouble:feet]) {
        [((JavaUtilArrayList *) NIL_CHK(closeJourneys)) addWithId:journey];
      }
    }
  }
  return closeJourneys;
}

- (id<JavaUtilList>)getActiveJourneys {
  return [[self getBusmeActivityController] getAllActiveJourneys];
}

- (void)triggerEventWithNSString:(NSString *)eventName
                          withId:(id)data {
  ComAdironBusmePlatformBuspassEvent *event = [[[ComAdironBusmePlatformBuspassEvent alloc] initWithNSString:eventName withId:data] autorelease];
  ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *obs = ((ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *) [((id<JavaUtilMap>) NIL_CHK(eventListeners_)) getWithId:eventName]);
  if (obs != nil) {
    [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"triggerEvent(%@) posting!!", eventName]];
    [obs setChanged];
    if ([self getUIHandler] == nil) {
      return;
    }
    [[self getUIHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformActivityAPI_$1 alloc] initWithNSString:eventName withComAdironBusmePlatformActivityAPI_BuspassEventNotifier:obs withComAdironBusmePlatformBuspassEvent:event] autorelease]];
  }
}

- (void)triggerEventWithNSString:(NSString *)eventName {
  [self triggerEventWithNSString:eventName withId:nil];
}

- (void)registerForEventWithNSString:(NSString *)eventName
withComAdironBusmePlatformBuspassEventListener:(id<ComAdironBusmePlatformBuspassEventListener>)event {
  ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *obs = ((ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *) [((id<JavaUtilMap>) NIL_CHK(eventListeners_)) getWithId:eventName]);
  if (obs == nil) {
    obs = [[[ComAdironBusmePlatformActivityAPI_BuspassEventNotifier alloc] initWithComAdironBusmePlatformActivityAPI:self] autorelease];
    [((id<JavaUtilMap>) NIL_CHK(eventListeners_)) putWithId:eventName withId:obs];
  }
  [((ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *) NIL_CHK(obs)) addObserverWithJavaUtilObserver:[[[ComAdironBusmePlatformActivityAPI_BuspassEventListenerProxy alloc] initWithComAdironBusmePlatformActivityAPI:self withComAdironBusmePlatformBuspassEventListener:event] autorelease]];
}

- (ComAdironBusmeApiAPIBase_Tag *)postAndParseTagWithNSString:(NSString *)url
                                             withJavaUtilList:(id<JavaUtilList>)params {
  if ([self isReady] && url != nil) {
    url = [NSString stringWithFormat:@"%@?platform=%@", url, [self getPlatformName]];
    NSString *args = [self getTrackingArgs];
    url = args == nil ? url : [NSString stringWithFormat:@"%@&%@", url, args];
    ComAdironBusmeIntegrationHttpHttpEntity *ent = [self postURLWithNSString:url withJavaUtilList:params];
    if (ent != nil) {
      ComAdironBusmeApiAPIBase_Tag *tag = [self xmlParseWithComAdironBusmeIntegrationHttpHttpEntity:ent];
      [ent consumeContent];
      return tag;
    }
  }
  return nil;
}

- (NSString *)getPreselectJourneyMessageWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)route {
  ComAdironBusmePlatformLocation *location = [self getLastFix];
  id<OrgOsmdroidApiIGeoPoint> loc = [ComAdironBusmePlatformGeoCalc toGeoPointWithComAdironBusmePlatformLocation:location];
  BOOL near = [((ComAdironBusmeApiRoute *) NIL_CHK(route)) isNearRouteWithOrgOsmdroidApiIGeoPoint:loc withDouble:100];
  id<OrgOsmdroidApiIGeoPoint> busLoc = [((ComAdironBusmeApiRoute *) NIL_CHK(route)) getLastKnownLocation];
  NSString *message = @"";
  if (busLoc != nil) {
    int dist = (int) [ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:loc withOrgOsmdroidApiIGeoPoint:busLoc];
    message = [NSString stringWithFormat:@"%@%@", message, [self formatWithInt:ComAdironBusmeR_string_you_are_dist_from_route withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [JavaLangInteger valueOfWithInt:dist] ]]];
  }
  if (!near) {
    message = [NSString stringWithFormat:@"%@%@", message, [NSString stringWithFormat:@" %@", [self formatWithInt:ComAdironBusmeR_string_you_are_not_within_100_feet withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:0 ]]]];
  }
  return message;
}

- (void)onLocatorMenuSelectWithNSString:(NSString *)roleIntent {
  if ([self hasAdequateLocationForPostingLocations]) {
    ComAdironBusmePlatformLocation *location = [self getLastFix];
    if (location == nil) {
      [self UIShowLongToastWithInt:ComAdironBusmeR_string_no_good_gps];
      return;
    }
    id<OrgOsmdroidApiIGeoPoint> origin = [ComAdironBusmePlatformGeoCalc toGeoPointWithComAdironBusmePlatformLocation:location];
    id<JavaUtilList> routes = [self getAllCloseJourneysWithComAdironBusmePlatformLocation:location withInt:500];
    JavaUtilTreeSet *rs = [[[JavaUtilTreeSet alloc] initWithJavaUtilComparator:[[[ComAdironBusmePlatformActivityAPI_LocRouteComparator alloc] initWithComAdironBusmePlatformActivityAPI:self withOrgOsmdroidApiIGeoPoint:origin] autorelease]] autorelease];
    {
      id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((id<JavaUtilList>) NIL_CHK(routes)) iterator]);
      while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
        ComAdironBusmeApiRoute *r = ((ComAdironBusmeApiRoute *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
        id<OrgOsmdroidApiIGeoPoint> loc = [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getLastKnownLocation];
        if (loc == nil) {
          loc = [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getNearestStartPointWithOrgOsmdroidApiIGeoPoint:origin withInt:100];
          if (loc != nil) {
            long long int timediff = [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getStartTime] - [((JavaUtilDate *) [[[JavaUtilDate alloc] init] autorelease]) getTime];
            if (0 <= timediff && timediff <= 10 * 60 * 1000) {
              [((JavaUtilTreeSet *) NIL_CHK(rs)) addWithId:[[[ComAdironBusmePlatformActivityAPI_LocRoute alloc] initWithComAdironBusmePlatformActivityAPI:self withOrgOsmdroidApiIGeoPoint:loc withComAdironBusmeApiRoute:r] autorelease]];
            }
          }
        }
        else {
          double dist = [ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:loc withOrgOsmdroidApiIGeoPoint:origin];
          if (dist < 3000) {
            [((JavaUtilTreeSet *) NIL_CHK(rs)) addWithId:[[[ComAdironBusmePlatformActivityAPI_LocRoute alloc] initWithComAdironBusmePlatformActivityAPI:self withOrgOsmdroidApiIGeoPoint:loc withComAdironBusmeApiRoute:r] autorelease]];
          }
        }
      }
    }
    if ([((JavaUtilTreeSet *) NIL_CHK(rs)) size] > 0) {
      id<JavaUtilList> result = [[[JavaUtilArrayList alloc] initWithInt:[((JavaUtilTreeSet *) NIL_CHK(rs)) size]] autorelease];
      {
        id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [((JavaUtilTreeSet *) NIL_CHK(rs)) iterator]);
        while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
          ComAdironBusmePlatformActivityAPI_LocRoute *r = ((ComAdironBusmePlatformActivityAPI_LocRoute *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
          [((id<JavaUtilList>) NIL_CHK(result)) addWithId:((ComAdironBusmePlatformActivityAPI_LocRoute *) NIL_CHK(r)).route];
        }
      }
      [self UIShowWhichBusDialogWithNSString:roleIntent withJavaUtilList:result];
    }
    else {
      [self UIShowLongToastWithInt:ComAdironBusmeR_string_no_journeys_available];
    }
  }
  else {
    [self UIShowLongToastWithInt:ComAdironBusmeR_string_no_good_gps];
  }
}

- (void)stopPosting {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"stopPosting() journeyLocationPoster = %@", journeyLocationPoster_]];
  if (journeyLocationPoster_ != nil) {
    ComAdironBusmeApiRoute *route = [journeyLocationPoster_ getPostingRoute];
    if (route != nil) {
      [((ComAdironBusmePlatformJourneyLocationPoster *) NIL_CHK(journeyLocationPoster_)) endPosting];
      JreOperatorRetainedAssign(&journeyLocationPoster_, nil);
      [self UIShowLongToastWithNSString:[self formatWithInt:ComAdironBusmeR_string_no_longer_reporting_locations withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [route getName] ]]];
      [self invalidateMap];
    }
    else {
      [self UIShowLongToastWithInt:ComAdironBusmeR_string_you_were_not_reporting_locations];
    }
  }
  else {
    [self UIShowLongToastWithInt:ComAdironBusmeR_string_you_were_not_reporting_locations];
  }
}

- (NSString *)getPostingRole {
  if (journeyLocationPoster_ != nil) {
    return [journeyLocationPoster_ getPostingRole];
  }
  return nil;
}

- (void)onSelectJourneyForPostingWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)route
                                               withNSString:(NSString *)role {
  [ComAdironBusmePlatformLog dWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"onSelectJourneyForPosting(%@ role %@", [((ComAdironBusmeApiRoute *) NIL_CHK(route)) getName], role]];
  if (journeyLocationPoster_ != nil) {
    [journeyLocationPoster_ endPosting];
    JreOperatorRetainedAssign(&journeyLocationPoster_, nil);
  }
  JreOperatorRetainedAssign(&journeyLocationPoster_, [[[ComAdironBusmePlatformJourneyLocationPoster alloc] initWithComAdironBusmePlatformActivityAPI:self withComAdironBusmeApiRoute:route withNSString:role] autorelease]);
  [self disableLocationBasedRouteFinder];
  [((ComAdironBusmePlatformJourneyLocationPoster *) NIL_CHK(journeyLocationPoster_)) setOnRouteEventListenerWithComAdironBusmePlatformJourneyLocationPoster_OnRouteEventListener:[[[ComAdironBusmePlatformActivityAPI_$2 alloc] initWithComAdironBusmePlatformActivityAPI:self withNSString:role] autorelease]];
  [self invalidateMap];
}

- (void)zoomToMasterSpan {
  if ([self getBusmeActivityController] != nil) {
    [[self getBusmeActivityController] mapZoomToSpanWithComAdironBusmeIntegrationBoundingBoxE6:[self getBoundingBox]];
  }
}

- (void)forceNewGetWithJavaLangRunnable:(id<JavaLangRunnable>)success
                   withJavaLangRunnable:(id<JavaLangRunnable>)networkFailure
                   withJavaLangRunnable:(id<JavaLangRunnable>)exception {
  @try {
    ComAdironBusmeApiBuspass *bp = [self forceGet];
    if (bp != nil) {
      {
        id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [[self getInitialMessages] iterator]);
        while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
          ComAdironBusmeApiMasterMessage *msg = ((ComAdironBusmeApiMasterMessage *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
          [[[self getBusmeActivityController] getMessageBasket] addMessageWithComAdironBusmeApiMasterMessage:msg];
        }
      }
      if ([self getUIHandler] != nil) {
        [[self getUIHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformActivityAPI_$3 alloc] initWithComAdironBusmePlatformActivityAPI:self withJavaLangRunnable:success] autorelease]];
      }
    }
    else {
      [ComAdironBusmePlatformLog eWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:[NSString stringWithFormat:@"Cannot contact municpality server at %@. Redicovering at %@", [self getApiUrl], [self getDiscoverUrl]]];
      ComAdironBusmeApiDiscoverAPIVersion1 *discoverAPI = [[[ComAdironBusmeApiDiscoverAPIVersion1 alloc] initWithNSString:[self getDiscoverUrl]] autorelease];
      BOOL result = [((ComAdironBusmeApiDiscoverAPIVersion1 *) NIL_CHK(discoverAPI)) get];
      if (result) {
        ComAdironBusmeApiMaster *master = [((ComAdironBusmeApiDiscoverAPIVersion1 *) NIL_CHK(discoverAPI)) findMasterWithNSString:[self getMasterSlug]];
        if (master != nil) {
          [self setMasterWithComAdironBusmeApiMaster:master];
          ComAdironBusmeApiBuspass *bp1 = [self forceGet];
          if (bp1 != nil) {
            {
              id<JavaUtilIterator> iter__ = ((id<JavaUtilIterator>) [[self getInitialMessages] iterator]);
              while ([((id<JavaUtilIterator>) NIL_CHK(iter__)) hasNext]) {
                ComAdironBusmeApiMasterMessage *msg = ((ComAdironBusmeApiMasterMessage *) [((id<JavaUtilIterator>) NIL_CHK(iter__)) next]);
                [[[self getBusmeActivityController] getMessageBasket] addMessageWithComAdironBusmeApiMasterMessage:msg];
              }
            }
            if ([self getUIHandler] != nil) {
              [[self getUIHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformActivityAPI_$4 alloc] initWithComAdironBusmePlatformActivityAPI:self withJavaLangRunnable:success] autorelease]];
            }
          }
        }
        else {
          @throw [[[JavaIoIOException alloc] initWithNSString:@"Cannot contact server"] autorelease];
        }
      }
      else {
        @throw [[[JavaIoIOException alloc] initWithNSString:@"Cannot discover server"] autorelease];
      }
    }
  }
  @catch (JavaIoIOException *e) {
    [ComAdironBusmePlatformLog eWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:@"onStart:get() Exception " withJavaLangThrowable:e];
    if ([self getUIHandler] != nil) {
      [[self getUIHandler] postWithJavaLangRunnable:networkFailure];
    }
  }
  @catch (JavaLangException *e) {
    [ComAdironBusmePlatformLog eWithNSString:ComAdironBusmePlatformActivityAPI_LOGTAG_ withNSString:@"onStart:get() Exception " withJavaLangThrowable:e];
    if ([self getUIHandler] != nil) {
      [[self getUIHandler] postWithJavaLangRunnable:exception];
    }
  }
}

- (NSString *)getDiscoverUrl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformJourneyStore *)getJourneyStore {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformBannerStore *)getBannerStore {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformMessageStore *)getMessageStore {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)formatWithInt:(int)format
          withNSObjectArray:(IOSObjectArray *)args {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (BOOL)hasAdequateLocationForPostingLocations {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformLocation *)getLastFix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformBusmeActivityController *)getBusmeActivityController {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformLoginManager *)getLoginManager {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)retreiveStoredAuthToken {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)forgetUser {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (ComAdironBusmePlatformHandler *)getUIHandler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ComAdironBusmePlatformHandler *)getBackgroundHandler {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)requestLocationUpdatesWithInt:(int)time
                              withInt:(int)dist
withComAdironBusmePlatformLocationListener:(id<ComAdironBusmePlatformLocationListener>)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeUpdatesWithComAdironBusmePlatformLocationListener:(id<ComAdironBusmePlatformLocationListener>)listener {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<ComAdironBusmePlatformProgressLogger>)getProgressLoggerWithBOOL:(BOOL)showwelcome {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)disableLocationBasedRouteFinder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableLocationBasedRouteFinder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)enableLocationBasedRouteFinderWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)route
                                                    withNSString:(NSString *)role {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)storeCredentialsWithComAdironBusmeApiBuspassAPI_Login:(ComAdironBusmeApiBuspassAPI_Login *)login {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeCredentialsAuthTokenWithComAdironBusmeApiBuspassAPI_Login:(ComAdironBusmeApiBuspassAPI_Login *)login {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)invalidateMap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)UIisMessagePopupShowing {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)UIShowMessagePopupWithComAdironBusmeApiMasterMessage:(ComAdironBusmeApiMasterMessage *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UILaunchLoginDialogWithComAdironBusmePlatformArguments:(ComAdironBusmePlatformArguments *)args
      withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
      withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UILaunchRegistrationDialogWithComAdironBusmePlatformArguments:(ComAdironBusmePlatformArguments *)args
             withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)success
             withComAdironBusmePlatformLoginManager_LoginContinuation:(ComAdironBusmePlatformLoginManager_LoginContinuation *)failure {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowProgressDialogWithInt:(int)title
                            withInt:(int)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowProgressDialogWithNSString:(NSString *)title
                            withNSString:(NSString *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowWhichBusDialogWithNSString:(NSString *)roleIntent
                        withJavaUtilList:(id<JavaUtilList>)routes {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UISetProgressBarIndeterminateVisibilityWithBOOL:(BOOL)visible {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (BOOL)UIShouldShowWelcome {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)UIShowWelcomeDialogWithNSString:(NSString *)name {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIDismissWelcomeDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIDismissProgressDialog {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowAlertDialogWithInt:(int)title
                         withInt:(int)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowAlertDialogWithNSString:(NSString *)title
                         withNSString:(NSString *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowShortToastWithNSString:(NSString *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowLongToastWithNSString:(NSString *)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowLongToastWithInt:(int)message {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIShowBannerWithComAdironBusmeApiBannerInfo:(ComAdironBusmeApiBannerInfo *)banner {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)UIHideBanner {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&journeyLocationPoster_, nil);
  JreOperatorRetainedAssign(&eventListeners_, nil);
  JreOperatorRetainedAssign(&masterSlug_, nil);
  JreOperatorRetainedAssign(&masterName_, nil);
  JreOperatorRetainedAssign(&configurator_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI *typedCopy = (ComAdironBusmePlatformActivityAPI *) copy;
  typedCopy.configurator = configurator_;
  typedCopy.masterName = masterName_;
  typedCopy.masterSlug = masterSlug_;
  typedCopy.eventListeners = eventListeners_;
  typedCopy.journeyLocationPoster = journeyLocationPoster_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_BuspassEventNotifier

- (void)setChanged {
  [super setChanged];
}

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$ {
  return [super init];
}

- (void)dealloc {
  [super dealloc];
}

@end
@implementation ComAdironBusmePlatformActivityAPI_BuspassEventListenerProxy

- (id<ComAdironBusmePlatformBuspassEventListener>)eventListener {
  return eventListener_;
}
- (void)setEventListener:(id<ComAdironBusmePlatformBuspassEventListener>)eventListener {
  JreOperatorRetainedAssign(&eventListener_, eventListener);
}
@synthesize eventListener = eventListener_;

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$
 withComAdironBusmePlatformBuspassEventListener:(id<ComAdironBusmePlatformBuspassEventListener>)lis {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&eventListener_, lis);
  }
  return self;
}

- (void)updateWithJavaUtilObservable:(JavaUtilObservable *)arg0
                              withId:(id)obj {
  ComAdironBusmePlatformBuspassEvent *ev = (ComAdironBusmePlatformBuspassEvent *) obj;
  [((id<ComAdironBusmePlatformBuspassEventListener>) NIL_CHK(eventListener_)) onBuspassEventWithNSString:[((ComAdironBusmePlatformBuspassEvent *) NIL_CHK(ev)) description] withComAdironBusmePlatformBuspassEvent:ev];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&eventListener_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_BuspassEventListenerProxy *typedCopy = (ComAdironBusmePlatformActivityAPI_BuspassEventListenerProxy *) copy;
  typedCopy.eventListener = eventListener_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_LocRoute

- (id<OrgOsmdroidApiIGeoPoint>)loc {
  return loc_;
}
- (void)setLoc:(id<OrgOsmdroidApiIGeoPoint>)loc {
  JreOperatorRetainedAssign(&loc_, loc);
}
@synthesize loc = loc_;
- (ComAdironBusmeApiRoute *)route {
  return route_;
}
- (void)setRoute:(ComAdironBusmeApiRoute *)route {
  JreOperatorRetainedAssign(&route_, route);
}
@synthesize route = route_;

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$
                    withOrgOsmdroidApiIGeoPoint:(id<OrgOsmdroidApiIGeoPoint>)a1
                     withComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)a2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&loc_, a1);
    JreOperatorRetainedAssign(&route_, a2);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&route_, nil);
  JreOperatorRetainedAssign(&loc_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_LocRoute *typedCopy = (ComAdironBusmePlatformActivityAPI_LocRoute *) copy;
  typedCopy.loc = loc_;
  typedCopy.route = route_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_LocRouteComparator

- (id<OrgOsmdroidApiIGeoPoint>)origin {
  return origin_;
}
- (void)setOrigin:(id<OrgOsmdroidApiIGeoPoint>)origin {
  JreOperatorRetainedAssign(&origin_, origin);
}
@synthesize origin = origin_;

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$
                    withOrgOsmdroidApiIGeoPoint:(id<OrgOsmdroidApiIGeoPoint>)origin {
  if ((self = [super init])) {
    self.origin = origin;
  }
  return self;
}

- (int)compareWithId:(ComAdironBusmePlatformActivityAPI_LocRoute *)arg0
              withId:(ComAdironBusmePlatformActivityAPI_LocRoute *)arg1 {
  return [JavaLangDouble compareWithDouble:[ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:origin_ withOrgOsmdroidApiIGeoPoint:((ComAdironBusmePlatformActivityAPI_LocRoute *) NIL_CHK(arg0)).loc] withDouble:[ComAdironBusmePlatformGeoPathUtils getGeoDistanceWithOrgOsmdroidApiIGeoPoint:origin_ withOrgOsmdroidApiIGeoPoint:((ComAdironBusmePlatformActivityAPI_LocRoute *) NIL_CHK(arg1)).loc]];
}

- (void)dealloc {
  JreOperatorRetainedAssign(&origin_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_LocRouteComparator *typedCopy = (ComAdironBusmePlatformActivityAPI_LocRouteComparator *) copy;
  typedCopy.origin = origin_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_$1

- (NSString *)val$eventName {
  return val$eventName_;
}
- (void)setVal$eventName:(NSString *)val$eventName {
  JreOperatorRetainedAssign(&val$eventName_, val$eventName);
}
@synthesize val$eventName = val$eventName_;
- (ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *)val$obs {
  return val$obs_;
}
- (void)setVal$obs:(ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *)val$obs {
  JreOperatorRetainedAssign(&val$obs_, val$obs);
}
@synthesize val$obs = val$obs_;
- (ComAdironBusmePlatformBuspassEvent *)val$event {
  return val$event_;
}
- (void)setVal$event:(ComAdironBusmePlatformBuspassEvent *)val$event {
  JreOperatorRetainedAssign(&val$event_, val$event);
}
@synthesize val$event = val$event_;

- (void)run {
  [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformActivityAPI LOGTAG] withNSString:[NSString stringWithFormat:@"triggerEvent(%@)!!", val$eventName_]];
  [((ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *) NIL_CHK(val$obs_)) notifyObserversWithId:val$event_];
}

- (id)initWithNSString:(NSString *)capture$0
withComAdironBusmePlatformActivityAPI_BuspassEventNotifier:(ComAdironBusmePlatformActivityAPI_BuspassEventNotifier *)capture$1
withComAdironBusmePlatformBuspassEvent:(ComAdironBusmePlatformBuspassEvent *)capture$2 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&val$eventName_, capture$0);
    JreOperatorRetainedAssign(&val$obs_, capture$1);
    JreOperatorRetainedAssign(&val$event_, capture$2);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$event_, nil);
  JreOperatorRetainedAssign(&val$obs_, nil);
  JreOperatorRetainedAssign(&val$eventName_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_$1 *typedCopy = (ComAdironBusmePlatformActivityAPI_$1 *) copy;
  typedCopy.val$eventName = val$eventName_;
  typedCopy.val$obs = val$obs_;
  typedCopy.val$event = val$event_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_$2

- (ComAdironBusmePlatformActivityAPI *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformActivityAPI *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (NSString *)val$role {
  return val$role_;
}
- (void)setVal$role:(NSString *)val$role {
  JreOperatorRetainedAssign(&val$role_, val$role);
}
@synthesize val$role = val$role_;

- (void)onOffRouteEventWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r
               withComAdironBusmePlatformLocation:(ComAdironBusmePlatformLocation *)loc {
  [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformActivityAPI LOGTAG] withNSString:[NSString stringWithFormat:@"onSelectJourneyForPosting.onOffRoute(%@", [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName]]];
  if (this$0_.journeyLocationPoster != nil) {
    [this$0_ UIShowLongToastWithNSString:[this$0_ formatWithInt:ComAdironBusmeR_string_off_route_frag_msg withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName] ]]];
    ComAdironBusmeApiRoute *lastPostingRoute = [this$0_.journeyLocationPoster getPostingRoute];
    NSString *lastPostingRole = [this$0_.journeyLocationPoster getPostingRole];
    [this$0_.journeyLocationPoster endPosting];
    this$0_.journeyLocationPoster = nil;
    [this$0_ enableLocationBasedRouteFinderWithComAdironBusmeApiRoute:lastPostingRoute withNSString:lastPostingRole];
    [this$0_ invalidateMap];
  }
}

- (void)atRouteEndWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r {
}

- (void)atRouteStartWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r {
  [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformActivityAPI LOGTAG] withNSString:[NSString stringWithFormat:@"onSelectJourneyForPosting.onRouteStarted(%@", [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName]]];
  [this$0_ UIShowLongToastWithNSString:[this$0_ formatWithInt:ComAdironBusmeR_string_journey_has_started withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName] ]]];
}

- (void)onOnRouteEventWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r
              withComAdironBusmePlatformLocation:(ComAdironBusmePlatformLocation *)loc {
  [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformActivityAPI LOGTAG] withNSString:[NSString stringWithFormat:@"onSelectJourneyForPosting.onRouteUpdated(%@", [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName]]];
  if ([this$0_ getBackgroundHandler] == nil) {
    return;
  }
  [[this$0_ getBackgroundHandler] postWithJavaLangRunnable:[[[ComAdironBusmePlatformActivityAPI_$2_$1 alloc] initWithComAdironBusmePlatformActivityAPI_$2:self withComAdironBusmeApiRoute:r withComAdironBusmePlatformLocation:loc] autorelease]];
}

- (void)onRoutePostingWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r {
}

- (void)onRouteDoneWithComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)r
withComAdironBusmePlatformJourneyLocationPoster_OnRouteEventListener_ReasonEnum:(ComAdironBusmePlatformJourneyLocationPoster_OnRouteEventListener_ReasonEnum *)reason {
  [ComAdironBusmePlatformLog dWithNSString:[ComAdironBusmePlatformActivityAPI LOGTAG] withNSString:[NSString stringWithFormat:@"onSelectJourneyForPosting.onRouteDone(%@, %@)" , [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName], reason, nil]];
  if (this$0_.journeyLocationPoster != nil) {
    switch ([reason ordinal]) {
      case ComAdironBusmePlatformJourneyLocationPoster_OnRouteEventListener_Reason_OFF_ROUTE:
      [this$0_ UIShowLongToastWithNSString:[this$0_ formatWithInt:ComAdironBusmeR_string_off_route_frag_msg withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName] ]]];
      default:
      [this$0_ UIShowLongToastWithNSString:[this$0_ formatWithInt:ComAdironBusmeR_string_end_route_frag_msg withNSObjectArray:[IOSObjectArray arrayWithType:[IOSClass classWithClass:[NSObject class]] count:1, [((ComAdironBusmeApiRoute *) NIL_CHK(r)) getName] ]]];
    }
    ComAdironBusmeApiRoute *lastPostingRoute = [this$0_.journeyLocationPoster getPostingRoute];
    NSString *lastPostingRole = [this$0_.journeyLocationPoster getPostingRole];
    this$0_.journeyLocationPoster = nil;
    [this$0_ enableLocationBasedRouteFinder];
    [this$0_ enableLocationBasedRouteFinderWithComAdironBusmeApiRoute:lastPostingRoute withNSString:lastPostingRole];
    [this$0_ invalidateMap];
  }
}

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$
                                   withNSString:(NSString *)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$role_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$role_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_$2 *typedCopy = (ComAdironBusmePlatformActivityAPI_$2 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$role = val$role_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_$2_$1

- (ComAdironBusmePlatformActivityAPI_$2 *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformActivityAPI_$2 *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (ComAdironBusmeApiRoute *)val$r {
  return val$r_;
}
- (void)setVal$r:(ComAdironBusmeApiRoute *)val$r {
  JreOperatorRetainedAssign(&val$r_, val$r);
}
@synthesize val$r = val$r_;
- (ComAdironBusmePlatformLocation *)val$loc {
  return val$loc_;
}
- (void)setVal$loc:(ComAdironBusmePlatformLocation *)val$loc {
  JreOperatorRetainedAssign(&val$loc_, val$loc);
}
@synthesize val$loc = val$loc_;

- (void)run {
  @try {
    [this$0_.this$0 postJourneyLocationWithComAdironBusmeApiRoute:val$r_ withComAdironBusmePlatformLocation:val$loc_ withNSString:this$0_.val$role];
  }
  @catch (JavaIoIOException *e) {
    [((JavaIoIOException *) NIL_CHK(e)) printStackTrace];
  }
}

- (id)initWithComAdironBusmePlatformActivityAPI_$2:(ComAdironBusmePlatformActivityAPI_$2 *)outer$
                        withComAdironBusmeApiRoute:(ComAdironBusmeApiRoute *)capture$0
                withComAdironBusmePlatformLocation:(ComAdironBusmePlatformLocation *)capture$1 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$r_, capture$0);
    JreOperatorRetainedAssign(&val$loc_, capture$1);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$loc_, nil);
  JreOperatorRetainedAssign(&val$r_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_$2_$1 *typedCopy = (ComAdironBusmePlatformActivityAPI_$2_$1 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$r = val$r_;
  typedCopy.val$loc = val$loc_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_$3

- (ComAdironBusmePlatformActivityAPI *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformActivityAPI *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (id<JavaLangRunnable>)val$success {
  return val$success_;
}
- (void)setVal$success:(id<JavaLangRunnable>)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;

- (void)run {
  [((id<JavaLangRunnable>) NIL_CHK(val$success_)) run];
  [this$0_ zoomToMasterSpan];
}

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$
                           withJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$success_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_$3 *typedCopy = (ComAdironBusmePlatformActivityAPI_$3 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$success = val$success_;
}

@end
@implementation ComAdironBusmePlatformActivityAPI_$4

- (ComAdironBusmePlatformActivityAPI *)this$0 {
  return this$0_;
}
- (void)setThis$0:(ComAdironBusmePlatformActivityAPI *)this$0 {
  JreOperatorRetainedAssign(&this$0_, this$0);
}
@synthesize this$0 = this$0_;
- (id<JavaLangRunnable>)val$success {
  return val$success_;
}
- (void)setVal$success:(id<JavaLangRunnable>)val$success {
  JreOperatorRetainedAssign(&val$success_, val$success);
}
@synthesize val$success = val$success_;

- (void)run {
  [((id<JavaLangRunnable>) NIL_CHK(val$success_)) run];
  [this$0_ zoomToMasterSpan];
}

- (id)initWithComAdironBusmePlatformActivityAPI:(ComAdironBusmePlatformActivityAPI *)outer$
                           withJavaLangRunnable:(id<JavaLangRunnable>)capture$0 {
  if ((self = [super init])) {
    JreOperatorRetainedAssign(&this$0_, outer$);
    JreOperatorRetainedAssign(&val$success_, capture$0);
  }
  return self;
}

- (void)dealloc {
  JreOperatorRetainedAssign(&val$success_, nil);
  JreOperatorRetainedAssign(&this$0_, nil);
  [super dealloc];
}

- (void)copyAllPropertiesTo:(id)copy {
  [super copyAllPropertiesTo:copy];
  ComAdironBusmePlatformActivityAPI_$4 *typedCopy = (ComAdironBusmePlatformActivityAPI_$4 *) copy;
  typedCopy.this$0 = this$0_;
  typedCopy.val$success = val$success_;
}

@end
